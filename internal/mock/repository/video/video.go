// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/video/video.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/video/video.go
//

// Package mock_videoRepository is a generated GoMock package.
package mock_videoRepository

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/slugger7/exorcist/internal/db/exorcist/public/model"
	videoRepository "github.com/slugger7/exorcist/internal/repository/video"
	gomock "go.uber.org/mock/gomock"
)

// MockIVideoRepository is a mock of IVideoRepository interface.
type MockIVideoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIVideoRepositoryMockRecorder
	isgomock struct{}
}

// MockIVideoRepositoryMockRecorder is the mock recorder for MockIVideoRepository.
type MockIVideoRepositoryMockRecorder struct {
	mock *MockIVideoRepository
}

// NewMockIVideoRepository creates a new mock instance.
func NewMockIVideoRepository(ctrl *gomock.Controller) *MockIVideoRepository {
	mock := &MockIVideoRepository{ctrl: ctrl}
	mock.recorder = &MockIVideoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVideoRepository) EXPECT() *MockIVideoRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockIVideoRepository) GetAll() ([]model.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIVideoRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIVideoRepository)(nil).GetAll))
}

// GetByIdWithMedia mocks base method.
func (m *MockIVideoRepository) GetByIdWithMedia(id uuid.UUID) (*videoRepository.MediaVideoModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdWithMedia", id)
	ret0, _ := ret[0].(*videoRepository.MediaVideoModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdWithMedia indicates an expected call of GetByIdWithMedia.
func (mr *MockIVideoRepositoryMockRecorder) GetByIdWithMedia(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdWithMedia", reflect.TypeOf((*MockIVideoRepository)(nil).GetByIdWithMedia), id)
}

// GetByMediaId mocks base method.
func (m *MockIVideoRepository) GetByMediaId(id uuid.UUID) (*videoRepository.MediaVideoModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMediaId", id)
	ret0, _ := ret[0].(*videoRepository.MediaVideoModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMediaId indicates an expected call of GetByMediaId.
func (mr *MockIVideoRepositoryMockRecorder) GetByMediaId(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMediaId", reflect.TypeOf((*MockIVideoRepository)(nil).GetByMediaId), id)
}

// Insert mocks base method.
func (m *MockIVideoRepository) Insert(models []model.Video) ([]model.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", models)
	ret0, _ := ret[0].([]model.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockIVideoRepositoryMockRecorder) Insert(models any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIVideoRepository)(nil).Insert), models)
}
