// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/image/image.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/image/image.go
//

// Package mock_imageRepository is a generated GoMock package.
package mock_imageRepository

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/slugger7/exorcist/internal/db/exorcist/public/model"
	imageRepository "github.com/slugger7/exorcist/internal/repository/image"
	gomock "go.uber.org/mock/gomock"
)

// MockIImageRepository is a mock of IImageRepository interface.
type MockIImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIImageRepositoryMockRecorder
	isgomock struct{}
}

// MockIImageRepositoryMockRecorder is the mock recorder for MockIImageRepository.
type MockIImageRepositoryMockRecorder struct {
	mock *MockIImageRepository
}

// NewMockIImageRepository creates a new mock instance.
func NewMockIImageRepository(ctrl *gomock.Controller) *MockIImageRepository {
	mock := &MockIImageRepository{ctrl: ctrl}
	mock.recorder = &MockIImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIImageRepository) EXPECT() *MockIImageRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockIImageRepository) Create(m *model.Image) (*model.Image, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", m)
	ret0, _ := ret[0].(*model.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIImageRepositoryMockRecorder) Create(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIImageRepository)(nil).Create), m)
}

// GetById mocks base method.
func (m *MockIImageRepository) GetById(arg0 uuid.UUID) (*imageRepository.MediaImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(*imageRepository.MediaImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIImageRepositoryMockRecorder) GetById(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIImageRepository)(nil).GetById), arg0)
}

// GetByMediaId mocks base method.
func (m *MockIImageRepository) GetByMediaId(arg0 uuid.UUID) (*imageRepository.MediaImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMediaId", arg0)
	ret0, _ := ret[0].(*imageRepository.MediaImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMediaId indicates an expected call of GetByMediaId.
func (mr *MockIImageRepositoryMockRecorder) GetByMediaId(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMediaId", reflect.TypeOf((*MockIImageRepository)(nil).GetByMediaId), arg0)
}
