// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/library_path/library_path.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/library_path/library_path.go
//

// Package mock_libraryPathRepository is a generated GoMock package.
package mock_libraryPathRepository

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/slugger7/exorcist/internal/db/exorcist/public/model"
	gomock "go.uber.org/mock/gomock"
)

// MockILibraryPathRepository is a mock of ILibraryPathRepository interface.
type MockILibraryPathRepository struct {
	ctrl     *gomock.Controller
	recorder *MockILibraryPathRepositoryMockRecorder
	isgomock struct{}
}

// MockILibraryPathRepositoryMockRecorder is the mock recorder for MockILibraryPathRepository.
type MockILibraryPathRepositoryMockRecorder struct {
	mock *MockILibraryPathRepository
}

// NewMockILibraryPathRepository creates a new mock instance.
func NewMockILibraryPathRepository(ctrl *gomock.Controller) *MockILibraryPathRepository {
	mock := &MockILibraryPathRepository{ctrl: ctrl}
	mock.recorder = &MockILibraryPathRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILibraryPathRepository) EXPECT() *MockILibraryPathRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockILibraryPathRepository) Create(path string, libraryId uuid.UUID) (*model.LibraryPath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", path, libraryId)
	ret0, _ := ret[0].(*model.LibraryPath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockILibraryPathRepositoryMockRecorder) Create(path, libraryId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockILibraryPathRepository)(nil).Create), path, libraryId)
}

// GetAll mocks base method.
func (m *MockILibraryPathRepository) GetAll() ([]model.LibraryPath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.LibraryPath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockILibraryPathRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockILibraryPathRepository)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockILibraryPathRepository) GetById(id uuid.UUID) (*model.LibraryPath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*model.LibraryPath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockILibraryPathRepositoryMockRecorder) GetById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockILibraryPathRepository)(nil).GetById), id)
}

// GetByLibraryId mocks base method.
func (m *MockILibraryPathRepository) GetByLibraryId(libraryId uuid.UUID) ([]model.LibraryPath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLibraryId", libraryId)
	ret0, _ := ret[0].([]model.LibraryPath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLibraryId indicates an expected call of GetByLibraryId.
func (mr *MockILibraryPathRepositoryMockRecorder) GetByLibraryId(libraryId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLibraryId", reflect.TypeOf((*MockILibraryPathRepository)(nil).GetByLibraryId), libraryId)
}
