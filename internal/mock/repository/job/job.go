// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/job/job.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/job/job.go
//

// Package mock_jobRepository is a generated GoMock package.
package mock_jobRepository

import (
	reflect "reflect"

	model "github.com/slugger7/exorcist/internal/db/exorcist/public/model"
	models "github.com/slugger7/exorcist/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockIJobRepository is a mock of IJobRepository interface.
type MockIJobRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIJobRepositoryMockRecorder
	isgomock struct{}
}

// MockIJobRepositoryMockRecorder is the mock recorder for MockIJobRepository.
type MockIJobRepositoryMockRecorder struct {
	mock *MockIJobRepository
}

// NewMockIJobRepository creates a new mock instance.
func NewMockIJobRepository(ctrl *gomock.Controller) *MockIJobRepository {
	mock := &MockIJobRepository{ctrl: ctrl}
	mock.recorder = &MockIJobRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJobRepository) EXPECT() *MockIJobRepositoryMockRecorder {
	return m.recorder
}

// CreateAll mocks base method.
func (m *MockIJobRepository) CreateAll(jobs []model.Job) ([]model.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAll", jobs)
	ret0, _ := ret[0].([]model.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAll indicates an expected call of CreateAll.
func (mr *MockIJobRepositoryMockRecorder) CreateAll(jobs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAll", reflect.TypeOf((*MockIJobRepository)(nil).CreateAll), jobs)
}

// GetAll mocks base method.
func (m *MockIJobRepository) GetAll(arg0 models.JobSearchDTO) (*models.Page[model.Job], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].(*models.Page[model.Job])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIJobRepositoryMockRecorder) GetAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIJobRepository)(nil).GetAll), arg0)
}

// GetNextJob mocks base method.
func (m *MockIJobRepository) GetNextJob() (*model.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextJob")
	ret0, _ := ret[0].(*model.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextJob indicates an expected call of GetNextJob.
func (mr *MockIJobRepositoryMockRecorder) GetNextJob() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextJob", reflect.TypeOf((*MockIJobRepository)(nil).GetNextJob))
}

// UpdateJobStatus mocks base method.
func (m *MockIJobRepository) UpdateJobStatus(model *model.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatus", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobStatus indicates an expected call of UpdateJobStatus.
func (mr *MockIJobRepositoryMockRecorder) UpdateJobStatus(model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatus", reflect.TypeOf((*MockIJobRepository)(nil).UpdateJobStatus), model)
}
