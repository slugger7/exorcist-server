// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/job/job.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/job/job.go
//

// Package mock_jobRepository is a generated GoMock package.
package mock_jobRepository

import (
	reflect "reflect"

	model "github.com/slugger7/exorcist/internal/db/exorcist/public/model"
	dto "github.com/slugger7/exorcist/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockJobRepository is a mock of JobRepository interface.
type MockJobRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobRepositoryMockRecorder
	isgomock struct{}
}

// MockJobRepositoryMockRecorder is the mock recorder for MockJobRepository.
type MockJobRepositoryMockRecorder struct {
	mock *MockJobRepository
}

// NewMockJobRepository creates a new mock instance.
func NewMockJobRepository(ctrl *gomock.Controller) *MockJobRepository {
	mock := &MockJobRepository{ctrl: ctrl}
	mock.recorder = &MockJobRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobRepository) EXPECT() *MockJobRepositoryMockRecorder {
	return m.recorder
}

// CancelInprogress mocks base method.
func (m *MockJobRepository) CancelInprogress() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelInprogress")
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelInprogress indicates an expected call of CancelInprogress.
func (mr *MockJobRepositoryMockRecorder) CancelInprogress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelInprogress", reflect.TypeOf((*MockJobRepository)(nil).CancelInprogress))
}

// CreateAll mocks base method.
func (m *MockJobRepository) CreateAll(jobs []model.Job) ([]model.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAll", jobs)
	ret0, _ := ret[0].([]model.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAll indicates an expected call of CreateAll.
func (mr *MockJobRepositoryMockRecorder) CreateAll(jobs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAll", reflect.TypeOf((*MockJobRepository)(nil).CreateAll), jobs)
}

// GetAll mocks base method.
func (m *MockJobRepository) GetAll(arg0 dto.JobSearchDTO) (*dto.PageDTO[model.Job], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].(*dto.PageDTO[model.Job])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockJobRepositoryMockRecorder) GetAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockJobRepository)(nil).GetAll), arg0)
}

// GetNextJob mocks base method.
func (m *MockJobRepository) GetNextJob() (*model.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextJob")
	ret0, _ := ret[0].(*model.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextJob indicates an expected call of GetNextJob.
func (mr *MockJobRepositoryMockRecorder) GetNextJob() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextJob", reflect.TypeOf((*MockJobRepository)(nil).GetNextJob))
}

// UpdateJobStatus mocks base method.
func (m *MockJobRepository) UpdateJobStatus(model *model.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatus", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobStatus indicates an expected call of UpdateJobStatus.
func (mr *MockJobRepositoryMockRecorder) UpdateJobStatus(model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatus", reflect.TypeOf((*MockJobRepository)(nil).UpdateJobStatus), model)
}
