// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/media/media.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/media/media.go
//

// Package mock_mediaRepository is a generated GoMock package.
package mock_mediaRepository

import (
	reflect "reflect"

	postgres "github.com/go-jet/jet/v2/postgres"
	uuid "github.com/google/uuid"
	model "github.com/slugger7/exorcist/internal/db/exorcist/public/model"
	dto "github.com/slugger7/exorcist/internal/dto"
	models "github.com/slugger7/exorcist/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockMediaRepository is a mock of MediaRepository interface.
type MockMediaRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMediaRepositoryMockRecorder
	isgomock struct{}
}

// MockMediaRepositoryMockRecorder is the mock recorder for MockMediaRepository.
type MockMediaRepositoryMockRecorder struct {
	mock *MockMediaRepository
}

// NewMockMediaRepository creates a new mock instance.
func NewMockMediaRepository(ctrl *gomock.Controller) *MockMediaRepository {
	mock := &MockMediaRepository{ctrl: ctrl}
	mock.recorder = &MockMediaRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaRepository) EXPECT() *MockMediaRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMediaRepository) Create(arg0 []model.Media) ([]model.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].([]model.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMediaRepositoryMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMediaRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m_2 *MockMediaRepository) Delete(m model.Media) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMediaRepositoryMockRecorder) Delete(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMediaRepository)(nil).Delete), m)
}

// GetAll mocks base method.
func (m *MockMediaRepository) GetAll(userId uuid.UUID, search dto.MediaSearchDTO) (*dto.PageDTO[models.MediaOverviewModel], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userId, search)
	ret0, _ := ret[0].(*dto.PageDTO[models.MediaOverviewModel])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMediaRepositoryMockRecorder) GetAll(userId, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMediaRepository)(nil).GetAll), userId, search)
}

// GetAssetsFor mocks base method.
func (m *MockMediaRepository) GetAssetsFor(id uuid.UUID) ([]model.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetsFor", id)
	ret0, _ := ret[0].([]model.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetsFor indicates an expected call of GetAssetsFor.
func (mr *MockMediaRepositoryMockRecorder) GetAssetsFor(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetsFor", reflect.TypeOf((*MockMediaRepository)(nil).GetAssetsFor), id)
}

// GetById mocks base method.
func (m *MockMediaRepository) GetById(id uuid.UUID) (*models.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*models.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockMediaRepositoryMockRecorder) GetById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockMediaRepository)(nil).GetById), id)
}

// GetByIdAndUserId mocks base method.
func (m *MockMediaRepository) GetByIdAndUserId(id, userId uuid.UUID) (*models.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdAndUserId", id, userId)
	ret0, _ := ret[0].(*models.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdAndUserId indicates an expected call of GetByIdAndUserId.
func (mr *MockMediaRepositoryMockRecorder) GetByIdAndUserId(id, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdAndUserId", reflect.TypeOf((*MockMediaRepository)(nil).GetByIdAndUserId), id, userId)
}

// GetByLibraryId mocks base method.
func (m *MockMediaRepository) GetByLibraryId(libraryId uuid.UUID, pageRequest *dto.PageRequestDTO, columns postgres.ColumnList) (*dto.PageDTO[model.Media], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLibraryId", libraryId, pageRequest, columns)
	ret0, _ := ret[0].(*dto.PageDTO[model.Media])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLibraryId indicates an expected call of GetByLibraryId.
func (mr *MockMediaRepositoryMockRecorder) GetByLibraryId(libraryId, pageRequest, columns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLibraryId", reflect.TypeOf((*MockMediaRepository)(nil).GetByLibraryId), libraryId, pageRequest, columns)
}

// GetByLibraryPathId mocks base method.
func (m *MockMediaRepository) GetByLibraryPathId(id uuid.UUID) ([]model.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLibraryPathId", id)
	ret0, _ := ret[0].([]model.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLibraryPathId indicates an expected call of GetByLibraryPathId.
func (mr *MockMediaRepositoryMockRecorder) GetByLibraryPathId(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLibraryPathId", reflect.TypeOf((*MockMediaRepository)(nil).GetByLibraryPathId), id)
}

// GetProgressForUser mocks base method.
func (m *MockMediaRepository) GetProgressForUser(id, userId uuid.UUID) (*model.MediaProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgressForUser", id, userId)
	ret0, _ := ret[0].(*model.MediaProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgressForUser indicates an expected call of GetProgressForUser.
func (mr *MockMediaRepositoryMockRecorder) GetProgressForUser(id, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgressForUser", reflect.TypeOf((*MockMediaRepository)(nil).GetProgressForUser), id, userId)
}

// Relate mocks base method.
func (m *MockMediaRepository) Relate(arg0 model.MediaRelation) (*model.MediaRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Relate", arg0)
	ret0, _ := ret[0].(*model.MediaRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Relate indicates an expected call of Relate.
func (mr *MockMediaRepositoryMockRecorder) Relate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relate", reflect.TypeOf((*MockMediaRepository)(nil).Relate), arg0)
}

// Update mocks base method.
func (m_2 *MockMediaRepository) Update(m model.Media, columns postgres.ColumnList) (*model.Media, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", m, columns)
	ret0, _ := ret[0].(*model.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMediaRepositoryMockRecorder) Update(m, columns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMediaRepository)(nil).Update), m, columns)
}

// UpdateChecksum mocks base method.
func (m_2 *MockMediaRepository) UpdateChecksum(m models.Media) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateChecksum", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChecksum indicates an expected call of UpdateChecksum.
func (mr *MockMediaRepositoryMockRecorder) UpdateChecksum(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChecksum", reflect.TypeOf((*MockMediaRepository)(nil).UpdateChecksum), m)
}

// UpdateExists mocks base method.
func (m *MockMediaRepository) UpdateExists(arg0 model.Media) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExists indicates an expected call of UpdateExists.
func (mr *MockMediaRepositoryMockRecorder) UpdateExists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExists", reflect.TypeOf((*MockMediaRepository)(nil).UpdateExists), arg0)
}

// UpsertProgress mocks base method.
func (m *MockMediaRepository) UpsertProgress(prog model.MediaProgress) (*model.MediaProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertProgress", prog)
	ret0, _ := ret[0].(*model.MediaProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertProgress indicates an expected call of UpsertProgress.
func (mr *MockMediaRepositoryMockRecorder) UpsertProgress(prog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProgress", reflect.TypeOf((*MockMediaRepository)(nil).UpsertProgress), prog)
}
