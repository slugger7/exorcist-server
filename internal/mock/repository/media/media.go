// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/media/media.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/media/media.go
//

// Package mock_mediaRepository is a generated GoMock package.
package mock_mediaRepository

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/slugger7/exorcist/internal/db/exorcist/public/model"
	dto "github.com/slugger7/exorcist/internal/dto"
	models "github.com/slugger7/exorcist/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockIMediaRepository is a mock of IMediaRepository interface.
type MockIMediaRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIMediaRepositoryMockRecorder
	isgomock struct{}
}

// MockIMediaRepositoryMockRecorder is the mock recorder for MockIMediaRepository.
type MockIMediaRepositoryMockRecorder struct {
	mock *MockIMediaRepository
}

// NewMockIMediaRepository creates a new mock instance.
func NewMockIMediaRepository(ctrl *gomock.Controller) *MockIMediaRepository {
	mock := &MockIMediaRepository{ctrl: ctrl}
	mock.recorder = &MockIMediaRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMediaRepository) EXPECT() *MockIMediaRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIMediaRepository) Create(arg0 []model.Media) ([]model.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].([]model.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIMediaRepositoryMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIMediaRepository)(nil).Create), arg0)
}

// GetAll mocks base method.
func (m *MockIMediaRepository) GetAll(arg0 dto.MediaSearchDTO) (*dto.PageDTO[models.MediaOverviewModel], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].(*dto.PageDTO[models.MediaOverviewModel])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIMediaRepositoryMockRecorder) GetAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIMediaRepository)(nil).GetAll), arg0)
}

// GetById mocks base method.
func (m *MockIMediaRepository) GetById(id uuid.UUID) (*models.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*models.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIMediaRepositoryMockRecorder) GetById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIMediaRepository)(nil).GetById), id)
}

// GetByLibraryPathId mocks base method.
func (m *MockIMediaRepository) GetByLibraryPathId(id uuid.UUID) ([]model.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLibraryPathId", id)
	ret0, _ := ret[0].([]model.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLibraryPathId indicates an expected call of GetByLibraryPathId.
func (mr *MockIMediaRepositoryMockRecorder) GetByLibraryPathId(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLibraryPathId", reflect.TypeOf((*MockIMediaRepository)(nil).GetByLibraryPathId), id)
}

// Relate mocks base method.
func (m *MockIMediaRepository) Relate(arg0 model.MediaRelation) (*model.MediaRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Relate", arg0)
	ret0, _ := ret[0].(*model.MediaRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Relate indicates an expected call of Relate.
func (mr *MockIMediaRepositoryMockRecorder) Relate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relate", reflect.TypeOf((*MockIMediaRepository)(nil).Relate), arg0)
}

// UpdateChecksum mocks base method.
func (m_2 *MockIMediaRepository) UpdateChecksum(m models.Media) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateChecksum", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChecksum indicates an expected call of UpdateChecksum.
func (mr *MockIMediaRepositoryMockRecorder) UpdateChecksum(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChecksum", reflect.TypeOf((*MockIMediaRepository)(nil).UpdateChecksum), m)
}

// UpdateExists mocks base method.
func (m *MockIMediaRepository) UpdateExists(arg0 model.Media) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExists indicates an expected call of UpdateExists.
func (mr *MockIMediaRepositoryMockRecorder) UpdateExists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExists", reflect.TypeOf((*MockIMediaRepository)(nil).UpdateExists), arg0)
}
