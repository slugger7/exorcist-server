// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/library/library.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/library/library.go
//

// Package mock_libraryRepository is a generated GoMock package.
package mock_libraryRepository

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/slugger7/exorcist/internal/db/exorcist/public/model"
	gomock "go.uber.org/mock/gomock"
)

// MockILibraryRepository is a mock of ILibraryRepository interface.
type MockILibraryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockILibraryRepositoryMockRecorder
	isgomock struct{}
}

// MockILibraryRepositoryMockRecorder is the mock recorder for MockILibraryRepository.
type MockILibraryRepositoryMockRecorder struct {
	mock *MockILibraryRepository
}

// NewMockILibraryRepository creates a new mock instance.
func NewMockILibraryRepository(ctrl *gomock.Controller) *MockILibraryRepository {
	mock := &MockILibraryRepository{ctrl: ctrl}
	mock.recorder = &MockILibraryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILibraryRepository) EXPECT() *MockILibraryRepositoryMockRecorder {
	return m.recorder
}

// CreateLibrary mocks base method.
func (m *MockILibraryRepository) CreateLibrary(name string) (*model.Library, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLibrary", name)
	ret0, _ := ret[0].(*model.Library)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLibrary indicates an expected call of CreateLibrary.
func (mr *MockILibraryRepositoryMockRecorder) CreateLibrary(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLibrary", reflect.TypeOf((*MockILibraryRepository)(nil).CreateLibrary), name)
}

// GetLibraries mocks base method.
func (m *MockILibraryRepository) GetLibraries() ([]model.Library, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLibraries")
	ret0, _ := ret[0].([]model.Library)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLibraries indicates an expected call of GetLibraries.
func (mr *MockILibraryRepositoryMockRecorder) GetLibraries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLibraries", reflect.TypeOf((*MockILibraryRepository)(nil).GetLibraries))
}

// GetLibraryById mocks base method.
func (m *MockILibraryRepository) GetLibraryById(arg0 uuid.UUID) (*model.Library, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLibraryById", arg0)
	ret0, _ := ret[0].(*model.Library)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLibraryById indicates an expected call of GetLibraryById.
func (mr *MockILibraryRepositoryMockRecorder) GetLibraryById(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLibraryById", reflect.TypeOf((*MockILibraryRepository)(nil).GetLibraryById), arg0)
}

// GetLibraryByName mocks base method.
func (m *MockILibraryRepository) GetLibraryByName(name string) (*model.Library, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLibraryByName", name)
	ret0, _ := ret[0].(*model.Library)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLibraryByName indicates an expected call of GetLibraryByName.
func (mr *MockILibraryRepositoryMockRecorder) GetLibraryByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLibraryByName", reflect.TypeOf((*MockILibraryRepository)(nil).GetLibraryByName), name)
}
