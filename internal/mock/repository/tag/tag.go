// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/tag/tag.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/tag/tag.go
//

// Package mock_tagRepository is a generated GoMock package.
package mock_tagRepository

import (
	reflect "reflect"

	model "github.com/slugger7/exorcist/internal/db/exorcist/public/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTagRepository is a mock of TagRepository interface.
type MockTagRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTagRepositoryMockRecorder
	isgomock struct{}
}

// MockTagRepositoryMockRecorder is the mock recorder for MockTagRepository.
type MockTagRepositoryMockRecorder struct {
	mock *MockTagRepository
}

// NewMockTagRepository creates a new mock instance.
func NewMockTagRepository(ctrl *gomock.Controller) *MockTagRepository {
	mock := &MockTagRepository{ctrl: ctrl}
	mock.recorder = &MockTagRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagRepository) EXPECT() *MockTagRepositoryMockRecorder {
	return m.recorder
}

// AddToMedia mocks base method.
func (m *MockTagRepository) AddToMedia(mediaPeople []model.MediaTag) ([]model.MediaTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToMedia", mediaPeople)
	ret0, _ := ret[0].([]model.MediaTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToMedia indicates an expected call of AddToMedia.
func (mr *MockTagRepositoryMockRecorder) AddToMedia(mediaPeople any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToMedia", reflect.TypeOf((*MockTagRepository)(nil).AddToMedia), mediaPeople)
}

// Create mocks base method.
func (m *MockTagRepository) Create(names []string) ([]model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", names)
	ret0, _ := ret[0].([]model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTagRepositoryMockRecorder) Create(names any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTagRepository)(nil).Create), names)
}

// GetByName mocks base method.
func (m *MockTagRepository) GetByName(name string) (*model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", name)
	ret0, _ := ret[0].(*model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockTagRepositoryMockRecorder) GetByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockTagRepository)(nil).GetByName), name)
}

// RemoveFromMedia mocks base method.
func (m *MockTagRepository) RemoveFromMedia(mediaTag model.MediaTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromMedia", mediaTag)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromMedia indicates an expected call of RemoveFromMedia.
func (mr *MockTagRepositoryMockRecorder) RemoveFromMedia(mediaTag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromMedia", reflect.TypeOf((*MockTagRepository)(nil).RemoveFromMedia), mediaTag)
}
