// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	imageRepository "github.com/slugger7/exorcist/internal/repository/image"
	jobRepository "github.com/slugger7/exorcist/internal/repository/job"
	libraryRepository "github.com/slugger7/exorcist/internal/repository/library"
	libraryPathRepository "github.com/slugger7/exorcist/internal/repository/library_path"
	mediaRepository "github.com/slugger7/exorcist/internal/repository/media"
	personRepository "github.com/slugger7/exorcist/internal/repository/person"
	playlistRepository "github.com/slugger7/exorcist/internal/repository/playlist"
	tagRepository "github.com/slugger7/exorcist/internal/repository/tag"
	userRepository "github.com/slugger7/exorcist/internal/repository/user"
	videoRepository "github.com/slugger7/exorcist/internal/repository/video"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// Health mocks base method.
func (m *MockRepository) Health() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockRepositoryMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockRepository)(nil).Health))
}

// Image mocks base method.
func (m *MockRepository) Image() imageRepository.ImageRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Image")
	ret0, _ := ret[0].(imageRepository.ImageRepository)
	return ret0
}

// Image indicates an expected call of Image.
func (mr *MockRepositoryMockRecorder) Image() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Image", reflect.TypeOf((*MockRepository)(nil).Image))
}

// Job mocks base method.
func (m *MockRepository) Job() jobRepository.JobRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Job")
	ret0, _ := ret[0].(jobRepository.JobRepository)
	return ret0
}

// Job indicates an expected call of Job.
func (mr *MockRepositoryMockRecorder) Job() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Job", reflect.TypeOf((*MockRepository)(nil).Job))
}

// Library mocks base method.
func (m *MockRepository) Library() libraryRepository.LibraryRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Library")
	ret0, _ := ret[0].(libraryRepository.LibraryRepository)
	return ret0
}

// Library indicates an expected call of Library.
func (mr *MockRepositoryMockRecorder) Library() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Library", reflect.TypeOf((*MockRepository)(nil).Library))
}

// LibraryPath mocks base method.
func (m *MockRepository) LibraryPath() libraryPathRepository.LibraryPathRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LibraryPath")
	ret0, _ := ret[0].(libraryPathRepository.LibraryPathRepository)
	return ret0
}

// LibraryPath indicates an expected call of LibraryPath.
func (mr *MockRepositoryMockRecorder) LibraryPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LibraryPath", reflect.TypeOf((*MockRepository)(nil).LibraryPath))
}

// Media mocks base method.
func (m *MockRepository) Media() mediaRepository.MediaRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Media")
	ret0, _ := ret[0].(mediaRepository.MediaRepository)
	return ret0
}

// Media indicates an expected call of Media.
func (mr *MockRepositoryMockRecorder) Media() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Media", reflect.TypeOf((*MockRepository)(nil).Media))
}

// Person mocks base method.
func (m *MockRepository) Person() personRepository.PersonRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Person")
	ret0, _ := ret[0].(personRepository.PersonRepository)
	return ret0
}

// Person indicates an expected call of Person.
func (mr *MockRepositoryMockRecorder) Person() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Person", reflect.TypeOf((*MockRepository)(nil).Person))
}

// Playlist mocks base method.
func (m *MockRepository) Playlist() playlistRepository.PlaylistRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Playlist")
	ret0, _ := ret[0].(playlistRepository.PlaylistRepository)
	return ret0
}

// Playlist indicates an expected call of Playlist.
func (mr *MockRepositoryMockRecorder) Playlist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Playlist", reflect.TypeOf((*MockRepository)(nil).Playlist))
}

// Tag mocks base method.
func (m *MockRepository) Tag() tagRepository.TagRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(tagRepository.TagRepository)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockRepositoryMockRecorder) Tag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockRepository)(nil).Tag))
}

// User mocks base method.
func (m *MockRepository) User() userRepository.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(userRepository.UserRepository)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockRepositoryMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockRepository)(nil).User))
}

// Video mocks base method.
func (m *MockRepository) Video() videoRepository.VideoRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Video")
	ret0, _ := ret[0].(videoRepository.VideoRepository)
	return ret0
}

// Video indicates an expected call of Video.
func (mr *MockRepositoryMockRecorder) Video() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Video", reflect.TypeOf((*MockRepository)(nil).Video))
}
