// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	imageRepository "github.com/slugger7/exorcist/internal/repository/image"
	jobRepository "github.com/slugger7/exorcist/internal/repository/job"
	libraryRepository "github.com/slugger7/exorcist/internal/repository/library"
	libraryPathRepository "github.com/slugger7/exorcist/internal/repository/library_path"
	mediaRepository "github.com/slugger7/exorcist/internal/repository/media"
	userRepository "github.com/slugger7/exorcist/internal/repository/user"
	videoRepository "github.com/slugger7/exorcist/internal/repository/video"
	gomock "go.uber.org/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
	isgomock struct{}
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIRepository)(nil).Close))
}

// Health mocks base method.
func (m *MockIRepository) Health() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockIRepositoryMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockIRepository)(nil).Health))
}

// Image mocks base method.
func (m *MockIRepository) Image() imageRepository.IImageRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Image")
	ret0, _ := ret[0].(imageRepository.IImageRepository)
	return ret0
}

// Image indicates an expected call of Image.
func (mr *MockIRepositoryMockRecorder) Image() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Image", reflect.TypeOf((*MockIRepository)(nil).Image))
}

// Job mocks base method.
func (m *MockIRepository) Job() jobRepository.IJobRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Job")
	ret0, _ := ret[0].(jobRepository.IJobRepository)
	return ret0
}

// Job indicates an expected call of Job.
func (mr *MockIRepositoryMockRecorder) Job() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Job", reflect.TypeOf((*MockIRepository)(nil).Job))
}

// Library mocks base method.
func (m *MockIRepository) Library() libraryRepository.ILibraryRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Library")
	ret0, _ := ret[0].(libraryRepository.ILibraryRepository)
	return ret0
}

// Library indicates an expected call of Library.
func (mr *MockIRepositoryMockRecorder) Library() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Library", reflect.TypeOf((*MockIRepository)(nil).Library))
}

// LibraryPath mocks base method.
func (m *MockIRepository) LibraryPath() libraryPathRepository.ILibraryPathRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LibraryPath")
	ret0, _ := ret[0].(libraryPathRepository.ILibraryPathRepository)
	return ret0
}

// LibraryPath indicates an expected call of LibraryPath.
func (mr *MockIRepositoryMockRecorder) LibraryPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LibraryPath", reflect.TypeOf((*MockIRepository)(nil).LibraryPath))
}

// Media mocks base method.
func (m *MockIRepository) Media() mediaRepository.IMediaRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Media")
	ret0, _ := ret[0].(mediaRepository.IMediaRepository)
	return ret0
}

// Media indicates an expected call of Media.
func (mr *MockIRepositoryMockRecorder) Media() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Media", reflect.TypeOf((*MockIRepository)(nil).Media))
}

// User mocks base method.
func (m *MockIRepository) User() userRepository.IUserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(userRepository.IUserRepository)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockIRepositoryMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockIRepository)(nil).User))
}

// Video mocks base method.
func (m *MockIRepository) Video() videoRepository.IVideoRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Video")
	ret0, _ := ret[0].(videoRepository.IVideoRepository)
	return ret0
}

// Video indicates an expected call of Video.
func (mr *MockIRepositoryMockRecorder) Video() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Video", reflect.TypeOf((*MockIRepository)(nil).Video))
}
