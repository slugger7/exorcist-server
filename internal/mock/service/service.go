// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/service.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	jobService "github.com/slugger7/exorcist/internal/service/job"
	libraryService "github.com/slugger7/exorcist/internal/service/library"
	libraryPathService "github.com/slugger7/exorcist/internal/service/library_path"
	mediaService "github.com/slugger7/exorcist/internal/service/media"
	personService "github.com/slugger7/exorcist/internal/service/person"
	playlistService "github.com/slugger7/exorcist/internal/service/playlist"
	tagService "github.com/slugger7/exorcist/internal/service/tag"
	userService "github.com/slugger7/exorcist/internal/service/user"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Job mocks base method.
func (m *MockService) Job() jobService.JobService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Job")
	ret0, _ := ret[0].(jobService.JobService)
	return ret0
}

// Job indicates an expected call of Job.
func (mr *MockServiceMockRecorder) Job() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Job", reflect.TypeOf((*MockService)(nil).Job))
}

// Library mocks base method.
func (m *MockService) Library() libraryService.LibraryService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Library")
	ret0, _ := ret[0].(libraryService.LibraryService)
	return ret0
}

// Library indicates an expected call of Library.
func (mr *MockServiceMockRecorder) Library() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Library", reflect.TypeOf((*MockService)(nil).Library))
}

// LibraryPath mocks base method.
func (m *MockService) LibraryPath() libraryPathService.LibraryPathService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LibraryPath")
	ret0, _ := ret[0].(libraryPathService.LibraryPathService)
	return ret0
}

// LibraryPath indicates an expected call of LibraryPath.
func (mr *MockServiceMockRecorder) LibraryPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LibraryPath", reflect.TypeOf((*MockService)(nil).LibraryPath))
}

// Media mocks base method.
func (m *MockService) Media() mediaService.MediaService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Media")
	ret0, _ := ret[0].(mediaService.MediaService)
	return ret0
}

// Media indicates an expected call of Media.
func (mr *MockServiceMockRecorder) Media() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Media", reflect.TypeOf((*MockService)(nil).Media))
}

// Person mocks base method.
func (m *MockService) Person() personService.PersonService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Person")
	ret0, _ := ret[0].(personService.PersonService)
	return ret0
}

// Person indicates an expected call of Person.
func (mr *MockServiceMockRecorder) Person() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Person", reflect.TypeOf((*MockService)(nil).Person))
}

// Playlist mocks base method.
func (m *MockService) Playlist() playlistService.PlaylistService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Playlist")
	ret0, _ := ret[0].(playlistService.PlaylistService)
	return ret0
}

// Playlist indicates an expected call of Playlist.
func (mr *MockServiceMockRecorder) Playlist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Playlist", reflect.TypeOf((*MockService)(nil).Playlist))
}

// Tag mocks base method.
func (m *MockService) Tag() tagService.TagService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(tagService.TagService)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockServiceMockRecorder) Tag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockService)(nil).Tag))
}

// User mocks base method.
func (m *MockService) User() userService.UserService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(userService.UserService)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockServiceMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockService)(nil).User))
}
