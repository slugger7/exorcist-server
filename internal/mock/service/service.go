// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/service.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	imageService "github.com/slugger7/exorcist/internal/service/image"
	libraryService "github.com/slugger7/exorcist/internal/service/library"
	libraryPathService "github.com/slugger7/exorcist/internal/service/library_path"
	userService "github.com/slugger7/exorcist/internal/service/user"
	videoService "github.com/slugger7/exorcist/internal/service/video"
	gomock "go.uber.org/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
	isgomock struct{}
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// Image mocks base method.
func (m *MockIService) Image() imageService.IImageService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Image")
	ret0, _ := ret[0].(imageService.IImageService)
	return ret0
}

// Image indicates an expected call of Image.
func (mr *MockIServiceMockRecorder) Image() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Image", reflect.TypeOf((*MockIService)(nil).Image))
}

// Library mocks base method.
func (m *MockIService) Library() libraryService.ILibraryService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Library")
	ret0, _ := ret[0].(libraryService.ILibraryService)
	return ret0
}

// Library indicates an expected call of Library.
func (mr *MockIServiceMockRecorder) Library() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Library", reflect.TypeOf((*MockIService)(nil).Library))
}

// LibraryPath mocks base method.
func (m *MockIService) LibraryPath() libraryPathService.ILibraryPathService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LibraryPath")
	ret0, _ := ret[0].(libraryPathService.ILibraryPathService)
	return ret0
}

// LibraryPath indicates an expected call of LibraryPath.
func (mr *MockIServiceMockRecorder) LibraryPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LibraryPath", reflect.TypeOf((*MockIService)(nil).LibraryPath))
}

// User mocks base method.
func (m *MockIService) User() userService.IUserService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(userService.IUserService)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockIServiceMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockIService)(nil).User))
}

// Video mocks base method.
func (m *MockIService) Video() videoService.IVideoService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Video")
	ret0, _ := ret[0].(videoService.IVideoService)
	return ret0
}

// Video indicates an expected call of Video.
func (mr *MockIServiceMockRecorder) Video() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Video", reflect.TypeOf((*MockIService)(nil).Video))
}
