// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/library/library.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/library/library.go
//

// Package mock_libraryService is a generated GoMock package.
package mock_libraryService

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/slugger7/exorcist/internal/db/exorcist/public/model"
	dto "github.com/slugger7/exorcist/internal/dto"
	models "github.com/slugger7/exorcist/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockLibraryService is a mock of LibraryService interface.
type MockLibraryService struct {
	ctrl     *gomock.Controller
	recorder *MockLibraryServiceMockRecorder
	isgomock struct{}
}

// MockLibraryServiceMockRecorder is the mock recorder for MockLibraryService.
type MockLibraryServiceMockRecorder struct {
	mock *MockLibraryService
}

// NewMockLibraryService creates a new mock instance.
func NewMockLibraryService(ctrl *gomock.Controller) *MockLibraryService {
	mock := &MockLibraryService{ctrl: ctrl}
	mock.recorder = &MockLibraryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLibraryService) EXPECT() *MockLibraryServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLibraryService) Create(newLibrary *model.Library) (*model.Library, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", newLibrary)
	ret0, _ := ret[0].(*model.Library)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLibraryServiceMockRecorder) Create(newLibrary any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLibraryService)(nil).Create), newLibrary)
}

// GetAll mocks base method.
func (m *MockLibraryService) GetAll() ([]model.Library, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Library)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockLibraryServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockLibraryService)(nil).GetAll))
}

// GetMedia mocks base method.
func (m *MockLibraryService) GetMedia(id, userId uuid.UUID, search dto.MediaSearchDTO) (*dto.PageDTO[models.MediaOverviewModel], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMedia", id, userId, search)
	ret0, _ := ret[0].(*dto.PageDTO[models.MediaOverviewModel])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMedia indicates an expected call of GetMedia.
func (mr *MockLibraryServiceMockRecorder) GetMedia(id, userId, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMedia", reflect.TypeOf((*MockLibraryService)(nil).GetMedia), id, userId, search)
}
