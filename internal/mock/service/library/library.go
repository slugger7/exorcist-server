// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/library/library.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/library/library.go
//

// Package mock_libraryService is a generated GoMock package.
package mock_libraryService

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/slugger7/exorcist/internal/db/exorcist/public/model"
	gomock "go.uber.org/mock/gomock"
)

// MockILibraryService is a mock of ILibraryService interface.
type MockILibraryService struct {
	ctrl     *gomock.Controller
	recorder *MockILibraryServiceMockRecorder
	isgomock struct{}
}

// MockILibraryServiceMockRecorder is the mock recorder for MockILibraryService.
type MockILibraryServiceMockRecorder struct {
	mock *MockILibraryService
}

// NewMockILibraryService creates a new mock instance.
func NewMockILibraryService(ctrl *gomock.Controller) *MockILibraryService {
	mock := &MockILibraryService{ctrl: ctrl}
	mock.recorder = &MockILibraryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILibraryService) EXPECT() *MockILibraryServiceMockRecorder {
	return m.recorder
}

// Action mocks base method.
func (m *MockILibraryService) Action(id uuid.UUID, action string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Action", id, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// Action indicates an expected call of Action.
func (mr *MockILibraryServiceMockRecorder) Action(id, action any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Action", reflect.TypeOf((*MockILibraryService)(nil).Action), id, action)
}

// Create mocks base method.
func (m *MockILibraryService) Create(newLibrary model.Library) (*model.Library, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", newLibrary)
	ret0, _ := ret[0].(*model.Library)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockILibraryServiceMockRecorder) Create(newLibrary any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockILibraryService)(nil).Create), newLibrary)
}

// GetAll mocks base method.
func (m *MockILibraryService) GetAll() ([]model.Library, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Library)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockILibraryServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockILibraryService)(nil).GetAll))
}
