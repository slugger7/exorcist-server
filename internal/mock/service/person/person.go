// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/person/person.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/person/person.go
//

// Package mock_personService is a generated GoMock package.
package mock_personService

import (
	reflect "reflect"

	model "github.com/slugger7/exorcist/internal/db/exorcist/public/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIPersonService is a mock of IPersonService interface.
type MockIPersonService struct {
	ctrl     *gomock.Controller
	recorder *MockIPersonServiceMockRecorder
	isgomock struct{}
}

// MockIPersonServiceMockRecorder is the mock recorder for MockIPersonService.
type MockIPersonServiceMockRecorder struct {
	mock *MockIPersonService
}

// NewMockIPersonService creates a new mock instance.
func NewMockIPersonService(ctrl *gomock.Controller) *MockIPersonService {
	mock := &MockIPersonService{ctrl: ctrl}
	mock.recorder = &MockIPersonServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPersonService) EXPECT() *MockIPersonServiceMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockIPersonService) Upsert(name string) (*model.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", name)
	ret0, _ := ret[0].(*model.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockIPersonServiceMockRecorder) Upsert(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockIPersonService)(nil).Upsert), name)
}
