// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/media/media.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/media/media.go
//

// Package mock_mediaService is a generated GoMock package.
package mock_mediaService

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	models "github.com/slugger7/exorcist/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockMediaService is a mock of MediaService interface.
type MockMediaService struct {
	ctrl     *gomock.Controller
	recorder *MockMediaServiceMockRecorder
	isgomock struct{}
}

// MockMediaServiceMockRecorder is the mock recorder for MockMediaService.
type MockMediaServiceMockRecorder struct {
	mock *MockMediaService
}

// NewMockMediaService creates a new mock instance.
func NewMockMediaService(ctrl *gomock.Controller) *MockMediaService {
	mock := &MockMediaService{ctrl: ctrl}
	mock.recorder = &MockMediaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaService) EXPECT() *MockMediaServiceMockRecorder {
	return m.recorder
}

// AddPeople mocks base method.
func (m *MockMediaService) AddPeople(id uuid.UUID, people []string) (*models.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPeople", id, people)
	ret0, _ := ret[0].(*models.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPeople indicates an expected call of AddPeople.
func (mr *MockMediaServiceMockRecorder) AddPeople(id, people any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeople", reflect.TypeOf((*MockMediaService)(nil).AddPeople), id, people)
}
