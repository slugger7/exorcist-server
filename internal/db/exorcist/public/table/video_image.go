//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var VideoImage = newVideoImageTable("public", "video_image", "")

type videoImageTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	VideoID        postgres.ColumnString
	ImageID        postgres.ColumnString
	VideoImageType postgres.ColumnString
	Created        postgres.ColumnTimestamp
	Modified       postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VideoImageTable struct {
	videoImageTable

	EXCLUDED videoImageTable
}

// AS creates new VideoImageTable with assigned alias
func (a VideoImageTable) AS(alias string) *VideoImageTable {
	return newVideoImageTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VideoImageTable with assigned schema name
func (a VideoImageTable) FromSchema(schemaName string) *VideoImageTable {
	return newVideoImageTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VideoImageTable with assigned table prefix
func (a VideoImageTable) WithPrefix(prefix string) *VideoImageTable {
	return newVideoImageTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VideoImageTable with assigned table suffix
func (a VideoImageTable) WithSuffix(suffix string) *VideoImageTable {
	return newVideoImageTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVideoImageTable(schemaName, tableName, alias string) *VideoImageTable {
	return &VideoImageTable{
		videoImageTable: newVideoImageTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newVideoImageTableImpl("", "excluded", ""),
	}
}

func newVideoImageTableImpl(schemaName, tableName, alias string) videoImageTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		VideoIDColumn        = postgres.StringColumn("video_id")
		ImageIDColumn        = postgres.StringColumn("image_id")
		VideoImageTypeColumn = postgres.StringColumn("video_image_type")
		CreatedColumn        = postgres.TimestampColumn("created")
		ModifiedColumn       = postgres.TimestampColumn("modified")
		allColumns           = postgres.ColumnList{IDColumn, VideoIDColumn, ImageIDColumn, VideoImageTypeColumn, CreatedColumn, ModifiedColumn}
		mutableColumns       = postgres.ColumnList{VideoIDColumn, ImageIDColumn, VideoImageTypeColumn, CreatedColumn, ModifiedColumn}
	)

	return videoImageTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		VideoID:        VideoIDColumn,
		ImageID:        ImageIDColumn,
		VideoImageType: VideoImageTypeColumn,
		Created:        CreatedColumn,
		Modified:       ModifiedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
