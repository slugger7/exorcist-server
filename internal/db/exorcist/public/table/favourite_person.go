//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FavouritePerson = newFavouritePersonTable("public", "favourite_person", "")

type favouritePersonTable struct {
	postgres.Table

	// Columns
	ID       postgres.ColumnString
	UserID   postgres.ColumnString
	PersonID postgres.ColumnString
	Created  postgres.ColumnTimestamp
	Modified postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FavouritePersonTable struct {
	favouritePersonTable

	EXCLUDED favouritePersonTable
}

// AS creates new FavouritePersonTable with assigned alias
func (a FavouritePersonTable) AS(alias string) *FavouritePersonTable {
	return newFavouritePersonTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FavouritePersonTable with assigned schema name
func (a FavouritePersonTable) FromSchema(schemaName string) *FavouritePersonTable {
	return newFavouritePersonTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FavouritePersonTable with assigned table prefix
func (a FavouritePersonTable) WithPrefix(prefix string) *FavouritePersonTable {
	return newFavouritePersonTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FavouritePersonTable with assigned table suffix
func (a FavouritePersonTable) WithSuffix(suffix string) *FavouritePersonTable {
	return newFavouritePersonTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFavouritePersonTable(schemaName, tableName, alias string) *FavouritePersonTable {
	return &FavouritePersonTable{
		favouritePersonTable: newFavouritePersonTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newFavouritePersonTableImpl("", "excluded", ""),
	}
}

func newFavouritePersonTableImpl(schemaName, tableName, alias string) favouritePersonTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		UserIDColumn   = postgres.StringColumn("user_id")
		PersonIDColumn = postgres.StringColumn("person_id")
		CreatedColumn  = postgres.TimestampColumn("created")
		ModifiedColumn = postgres.TimestampColumn("modified")
		allColumns     = postgres.ColumnList{IDColumn, UserIDColumn, PersonIDColumn, CreatedColumn, ModifiedColumn}
		mutableColumns = postgres.ColumnList{UserIDColumn, PersonIDColumn, CreatedColumn, ModifiedColumn}
	)

	return favouritePersonTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		UserID:   UserIDColumn,
		PersonID: PersonIDColumn,
		Created:  CreatedColumn,
		Modified: ModifiedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
