//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Playlist = newPlaylistTable("public", "playlist", "")

type playlistTable struct {
	postgres.Table

	// Columns
	ID       postgres.ColumnString
	Name     postgres.ColumnString
	UserID   postgres.ColumnString
	Created  postgres.ColumnTimestamp
	Modified postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PlaylistTable struct {
	playlistTable

	EXCLUDED playlistTable
}

// AS creates new PlaylistTable with assigned alias
func (a PlaylistTable) AS(alias string) *PlaylistTable {
	return newPlaylistTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PlaylistTable with assigned schema name
func (a PlaylistTable) FromSchema(schemaName string) *PlaylistTable {
	return newPlaylistTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PlaylistTable with assigned table prefix
func (a PlaylistTable) WithPrefix(prefix string) *PlaylistTable {
	return newPlaylistTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PlaylistTable with assigned table suffix
func (a PlaylistTable) WithSuffix(suffix string) *PlaylistTable {
	return newPlaylistTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPlaylistTable(schemaName, tableName, alias string) *PlaylistTable {
	return &PlaylistTable{
		playlistTable: newPlaylistTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newPlaylistTableImpl("", "excluded", ""),
	}
}

func newPlaylistTableImpl(schemaName, tableName, alias string) playlistTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		NameColumn     = postgres.StringColumn("name")
		UserIDColumn   = postgres.StringColumn("user_id")
		CreatedColumn  = postgres.TimestampColumn("created")
		ModifiedColumn = postgres.TimestampColumn("modified")
		allColumns     = postgres.ColumnList{IDColumn, NameColumn, UserIDColumn, CreatedColumn, ModifiedColumn}
		mutableColumns = postgres.ColumnList{NameColumn, UserIDColumn, CreatedColumn, ModifiedColumn}
	)

	return playlistTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		Name:     NameColumn,
		UserID:   UserIDColumn,
		Created:  CreatedColumn,
		Modified: ModifiedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
