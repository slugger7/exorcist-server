//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var MediaRelation = newMediaRelationTable("public", "media_relation", "")

type mediaRelationTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	MediaID      postgres.ColumnString
	RelatedTo    postgres.ColumnString
	RelationType postgres.ColumnString
	Created      postgres.ColumnTimestamp
	Modified     postgres.ColumnTimestamp
	GhostID      postgres.ColumnInteger
	Metadata     postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MediaRelationTable struct {
	mediaRelationTable

	EXCLUDED mediaRelationTable
}

// AS creates new MediaRelationTable with assigned alias
func (a MediaRelationTable) AS(alias string) *MediaRelationTable {
	return newMediaRelationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MediaRelationTable with assigned schema name
func (a MediaRelationTable) FromSchema(schemaName string) *MediaRelationTable {
	return newMediaRelationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MediaRelationTable with assigned table prefix
func (a MediaRelationTable) WithPrefix(prefix string) *MediaRelationTable {
	return newMediaRelationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MediaRelationTable with assigned table suffix
func (a MediaRelationTable) WithSuffix(suffix string) *MediaRelationTable {
	return newMediaRelationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMediaRelationTable(schemaName, tableName, alias string) *MediaRelationTable {
	return &MediaRelationTable{
		mediaRelationTable: newMediaRelationTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newMediaRelationTableImpl("", "excluded", ""),
	}
}

func newMediaRelationTableImpl(schemaName, tableName, alias string) mediaRelationTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		MediaIDColumn      = postgres.StringColumn("media_id")
		RelatedToColumn    = postgres.StringColumn("related_to")
		RelationTypeColumn = postgres.StringColumn("relation_type")
		CreatedColumn      = postgres.TimestampColumn("created")
		ModifiedColumn     = postgres.TimestampColumn("modified")
		GhostIDColumn      = postgres.IntegerColumn("ghost_id")
		MetadataColumn     = postgres.StringColumn("metadata")
		allColumns         = postgres.ColumnList{IDColumn, MediaIDColumn, RelatedToColumn, RelationTypeColumn, CreatedColumn, ModifiedColumn, GhostIDColumn, MetadataColumn}
		mutableColumns     = postgres.ColumnList{MediaIDColumn, RelatedToColumn, RelationTypeColumn, CreatedColumn, ModifiedColumn, GhostIDColumn, MetadataColumn}
	)

	return mediaRelationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		MediaID:      MediaIDColumn,
		RelatedTo:    RelatedToColumn,
		RelationType: RelationTypeColumn,
		Created:      CreatedColumn,
		Modified:     ModifiedColumn,
		GhostID:      GhostIDColumn,
		Metadata:     MetadataColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
