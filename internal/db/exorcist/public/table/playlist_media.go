//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PlaylistMedia = newPlaylistMediaTable("public", "playlist_media", "")

type playlistMediaTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnString
	PlaylistID postgres.ColumnString
	MediaID    postgres.ColumnString
	Created    postgres.ColumnTimestamp
	Modified   postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PlaylistMediaTable struct {
	playlistMediaTable

	EXCLUDED playlistMediaTable
}

// AS creates new PlaylistMediaTable with assigned alias
func (a PlaylistMediaTable) AS(alias string) *PlaylistMediaTable {
	return newPlaylistMediaTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PlaylistMediaTable with assigned schema name
func (a PlaylistMediaTable) FromSchema(schemaName string) *PlaylistMediaTable {
	return newPlaylistMediaTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PlaylistMediaTable with assigned table prefix
func (a PlaylistMediaTable) WithPrefix(prefix string) *PlaylistMediaTable {
	return newPlaylistMediaTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PlaylistMediaTable with assigned table suffix
func (a PlaylistMediaTable) WithSuffix(suffix string) *PlaylistMediaTable {
	return newPlaylistMediaTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPlaylistMediaTable(schemaName, tableName, alias string) *PlaylistMediaTable {
	return &PlaylistMediaTable{
		playlistMediaTable: newPlaylistMediaTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newPlaylistMediaTableImpl("", "excluded", ""),
	}
}

func newPlaylistMediaTableImpl(schemaName, tableName, alias string) playlistMediaTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		PlaylistIDColumn = postgres.StringColumn("playlist_id")
		MediaIDColumn    = postgres.StringColumn("media_id")
		CreatedColumn    = postgres.TimestampColumn("created")
		ModifiedColumn   = postgres.TimestampColumn("modified")
		allColumns       = postgres.ColumnList{IDColumn, PlaylistIDColumn, MediaIDColumn, CreatedColumn, ModifiedColumn}
		mutableColumns   = postgres.ColumnList{PlaylistIDColumn, MediaIDColumn, CreatedColumn, ModifiedColumn}
	)

	return playlistMediaTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		PlaylistID: PlaylistIDColumn,
		MediaID:    MediaIDColumn,
		Created:    CreatedColumn,
		Modified:   ModifiedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
