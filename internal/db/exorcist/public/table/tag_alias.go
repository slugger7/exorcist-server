//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TagAlias = newTagAliasTable("public", "tag_alias", "")

type tagAliasTable struct {
	postgres.Table

	// Columns
	ID       postgres.ColumnString
	Alias_   postgres.ColumnString
	Created  postgres.ColumnTimestamp
	Modified postgres.ColumnTimestamp
	TagID    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type TagAliasTable struct {
	tagAliasTable

	EXCLUDED tagAliasTable
}

// AS creates new TagAliasTable with assigned alias
func (a TagAliasTable) AS(alias string) *TagAliasTable {
	return newTagAliasTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TagAliasTable with assigned schema name
func (a TagAliasTable) FromSchema(schemaName string) *TagAliasTable {
	return newTagAliasTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TagAliasTable with assigned table prefix
func (a TagAliasTable) WithPrefix(prefix string) *TagAliasTable {
	return newTagAliasTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TagAliasTable with assigned table suffix
func (a TagAliasTable) WithSuffix(suffix string) *TagAliasTable {
	return newTagAliasTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTagAliasTable(schemaName, tableName, alias string) *TagAliasTable {
	return &TagAliasTable{
		tagAliasTable: newTagAliasTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newTagAliasTableImpl("", "excluded", ""),
	}
}

func newTagAliasTableImpl(schemaName, tableName, alias string) tagAliasTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		Alias_Column   = postgres.StringColumn("alias")
		CreatedColumn  = postgres.TimestampColumn("created")
		ModifiedColumn = postgres.TimestampColumn("modified")
		TagIDColumn    = postgres.StringColumn("tag_id")
		allColumns     = postgres.ColumnList{IDColumn, Alias_Column, CreatedColumn, ModifiedColumn, TagIDColumn}
		mutableColumns = postgres.ColumnList{Alias_Column, CreatedColumn, ModifiedColumn, TagIDColumn}
		defaultColumns = postgres.ColumnList{IDColumn, CreatedColumn, ModifiedColumn}
	)

	return tagAliasTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		Alias_:   Alias_Column,
		Created:  CreatedColumn,
		Modified: ModifiedColumn,
		TagID:    TagIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
