//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Tag = newTagTable("public", "tag", "")

type tagTable struct {
	postgres.Table

	// Columns
	ID       postgres.ColumnString
	Name     postgres.ColumnString
	Created  postgres.ColumnTimestamp
	Modified postgres.ColumnTimestamp
	GhostID  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type TagTable struct {
	tagTable

	EXCLUDED tagTable
}

// AS creates new TagTable with assigned alias
func (a TagTable) AS(alias string) *TagTable {
	return newTagTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TagTable with assigned schema name
func (a TagTable) FromSchema(schemaName string) *TagTable {
	return newTagTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TagTable with assigned table prefix
func (a TagTable) WithPrefix(prefix string) *TagTable {
	return newTagTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TagTable with assigned table suffix
func (a TagTable) WithSuffix(suffix string) *TagTable {
	return newTagTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTagTable(schemaName, tableName, alias string) *TagTable {
	return &TagTable{
		tagTable: newTagTableImpl(schemaName, tableName, alias),
		EXCLUDED: newTagTableImpl("", "excluded", ""),
	}
}

func newTagTableImpl(schemaName, tableName, alias string) tagTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		NameColumn     = postgres.StringColumn("name")
		CreatedColumn  = postgres.TimestampColumn("created")
		ModifiedColumn = postgres.TimestampColumn("modified")
		GhostIDColumn  = postgres.IntegerColumn("ghost_id")
		allColumns     = postgres.ColumnList{IDColumn, NameColumn, CreatedColumn, ModifiedColumn, GhostIDColumn}
		mutableColumns = postgres.ColumnList{NameColumn, CreatedColumn, ModifiedColumn, GhostIDColumn}
		defaultColumns = postgres.ColumnList{IDColumn, CreatedColumn, ModifiedColumn}
	)

	return tagTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		Name:     NameColumn,
		Created:  CreatedColumn,
		Modified: ModifiedColumn,
		GhostID:  GhostIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
