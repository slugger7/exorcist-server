//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Job = newJobTable("public", "job", "")

type jobTable struct {
	postgres.Table

	// Columns
	ID       postgres.ColumnString
	Parent   postgres.ColumnString
	Priority postgres.ColumnInteger
	Status   postgres.ColumnString
	Data     postgres.ColumnString
	Outcome  postgres.ColumnString
	Created  postgres.ColumnTimestamp
	Modified postgres.ColumnTimestamp
	JobType  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type JobTable struct {
	jobTable

	EXCLUDED jobTable
}

// AS creates new JobTable with assigned alias
func (a JobTable) AS(alias string) *JobTable {
	return newJobTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new JobTable with assigned schema name
func (a JobTable) FromSchema(schemaName string) *JobTable {
	return newJobTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new JobTable with assigned table prefix
func (a JobTable) WithPrefix(prefix string) *JobTable {
	return newJobTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new JobTable with assigned table suffix
func (a JobTable) WithSuffix(suffix string) *JobTable {
	return newJobTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newJobTable(schemaName, tableName, alias string) *JobTable {
	return &JobTable{
		jobTable: newJobTableImpl(schemaName, tableName, alias),
		EXCLUDED: newJobTableImpl("", "excluded", ""),
	}
}

func newJobTableImpl(schemaName, tableName, alias string) jobTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		ParentColumn   = postgres.StringColumn("parent")
		PriorityColumn = postgres.IntegerColumn("priority")
		StatusColumn   = postgres.StringColumn("status")
		DataColumn     = postgres.StringColumn("data")
		OutcomeColumn  = postgres.StringColumn("outcome")
		CreatedColumn  = postgres.TimestampColumn("created")
		ModifiedColumn = postgres.TimestampColumn("modified")
		JobTypeColumn  = postgres.StringColumn("job_type")
		allColumns     = postgres.ColumnList{IDColumn, ParentColumn, PriorityColumn, StatusColumn, DataColumn, OutcomeColumn, CreatedColumn, ModifiedColumn, JobTypeColumn}
		mutableColumns = postgres.ColumnList{ParentColumn, PriorityColumn, StatusColumn, DataColumn, OutcomeColumn, CreatedColumn, ModifiedColumn, JobTypeColumn}
	)

	return jobTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		Parent:   ParentColumn,
		Priority: PriorityColumn,
		Status:   StatusColumn,
		Data:     DataColumn,
		Outcome:  OutcomeColumn,
		Created:  CreatedColumn,
		Modified: ModifiedColumn,
		JobType:  JobTypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
