//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var LibraryPath = newLibraryPathTable("public", "library_path", "")

type libraryPathTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	LibraryID postgres.ColumnString
	Path      postgres.ColumnString
	Created   postgres.ColumnTimestamp
	Modified  postgres.ColumnTimestamp
	GhostID   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type LibraryPathTable struct {
	libraryPathTable

	EXCLUDED libraryPathTable
}

// AS creates new LibraryPathTable with assigned alias
func (a LibraryPathTable) AS(alias string) *LibraryPathTable {
	return newLibraryPathTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LibraryPathTable with assigned schema name
func (a LibraryPathTable) FromSchema(schemaName string) *LibraryPathTable {
	return newLibraryPathTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LibraryPathTable with assigned table prefix
func (a LibraryPathTable) WithPrefix(prefix string) *LibraryPathTable {
	return newLibraryPathTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LibraryPathTable with assigned table suffix
func (a LibraryPathTable) WithSuffix(suffix string) *LibraryPathTable {
	return newLibraryPathTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLibraryPathTable(schemaName, tableName, alias string) *LibraryPathTable {
	return &LibraryPathTable{
		libraryPathTable: newLibraryPathTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newLibraryPathTableImpl("", "excluded", ""),
	}
}

func newLibraryPathTableImpl(schemaName, tableName, alias string) libraryPathTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		LibraryIDColumn = postgres.StringColumn("library_id")
		PathColumn      = postgres.StringColumn("path")
		CreatedColumn   = postgres.TimestampColumn("created")
		ModifiedColumn  = postgres.TimestampColumn("modified")
		GhostIDColumn   = postgres.IntegerColumn("ghost_id")
		allColumns      = postgres.ColumnList{IDColumn, LibraryIDColumn, PathColumn, CreatedColumn, ModifiedColumn, GhostIDColumn}
		mutableColumns  = postgres.ColumnList{LibraryIDColumn, PathColumn, CreatedColumn, ModifiedColumn, GhostIDColumn}
		defaultColumns  = postgres.ColumnList{IDColumn, CreatedColumn, ModifiedColumn}
	)

	return libraryPathTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		LibraryID: LibraryIDColumn,
		Path:      PathColumn,
		Created:   CreatedColumn,
		Modified:  ModifiedColumn,
		GhostID:   GhostIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
