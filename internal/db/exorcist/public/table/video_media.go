//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var VideoMedia = newVideoMediaTable("public", "video_media", "")

type videoMediaTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	VideoID        postgres.ColumnString
	MediaID        postgres.ColumnString
	VideoMediaType postgres.ColumnString
	Created        postgres.ColumnTimestamp
	Modified       postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VideoMediaTable struct {
	videoMediaTable

	EXCLUDED videoMediaTable
}

// AS creates new VideoMediaTable with assigned alias
func (a VideoMediaTable) AS(alias string) *VideoMediaTable {
	return newVideoMediaTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VideoMediaTable with assigned schema name
func (a VideoMediaTable) FromSchema(schemaName string) *VideoMediaTable {
	return newVideoMediaTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VideoMediaTable with assigned table prefix
func (a VideoMediaTable) WithPrefix(prefix string) *VideoMediaTable {
	return newVideoMediaTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VideoMediaTable with assigned table suffix
func (a VideoMediaTable) WithSuffix(suffix string) *VideoMediaTable {
	return newVideoMediaTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVideoMediaTable(schemaName, tableName, alias string) *VideoMediaTable {
	return &VideoMediaTable{
		videoMediaTable: newVideoMediaTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newVideoMediaTableImpl("", "excluded", ""),
	}
}

func newVideoMediaTableImpl(schemaName, tableName, alias string) videoMediaTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		VideoIDColumn        = postgres.StringColumn("video_id")
		MediaIDColumn        = postgres.StringColumn("media_id")
		VideoMediaTypeColumn = postgres.StringColumn("video_media_type")
		CreatedColumn        = postgres.TimestampColumn("created")
		ModifiedColumn       = postgres.TimestampColumn("modified")
		allColumns           = postgres.ColumnList{IDColumn, VideoIDColumn, MediaIDColumn, VideoMediaTypeColumn, CreatedColumn, ModifiedColumn}
		mutableColumns       = postgres.ColumnList{VideoIDColumn, MediaIDColumn, VideoMediaTypeColumn, CreatedColumn, ModifiedColumn}
	)

	return videoMediaTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		VideoID:        VideoIDColumn,
		MediaID:        MediaIDColumn,
		VideoMediaType: VideoMediaTypeColumn,
		Created:        CreatedColumn,
		Modified:       ModifiedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
