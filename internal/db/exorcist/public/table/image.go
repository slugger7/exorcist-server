//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Image = newImageTable("public", "image", "")

type imageTable struct {
	postgres.Table

	// Columns
	ID      postgres.ColumnString
	MediaID postgres.ColumnString
	Height  postgres.ColumnInteger
	Width   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type ImageTable struct {
	imageTable

	EXCLUDED imageTable
}

// AS creates new ImageTable with assigned alias
func (a ImageTable) AS(alias string) *ImageTable {
	return newImageTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ImageTable with assigned schema name
func (a ImageTable) FromSchema(schemaName string) *ImageTable {
	return newImageTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ImageTable with assigned table prefix
func (a ImageTable) WithPrefix(prefix string) *ImageTable {
	return newImageTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ImageTable with assigned table suffix
func (a ImageTable) WithSuffix(suffix string) *ImageTable {
	return newImageTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newImageTable(schemaName, tableName, alias string) *ImageTable {
	return &ImageTable{
		imageTable: newImageTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newImageTableImpl("", "excluded", ""),
	}
}

func newImageTableImpl(schemaName, tableName, alias string) imageTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		MediaIDColumn  = postgres.StringColumn("media_id")
		HeightColumn   = postgres.IntegerColumn("height")
		WidthColumn    = postgres.IntegerColumn("width")
		allColumns     = postgres.ColumnList{IDColumn, MediaIDColumn, HeightColumn, WidthColumn}
		mutableColumns = postgres.ColumnList{MediaIDColumn, HeightColumn, WidthColumn}
		defaultColumns = postgres.ColumnList{IDColumn}
	)

	return imageTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		MediaID: MediaIDColumn,
		Height:  HeightColumn,
		Width:   WidthColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
