//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Media = newMediaTable("public", "media", "")

type mediaTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnString
	LibraryPathID postgres.ColumnString
	Path          postgres.ColumnString
	Title         postgres.ColumnString
	MediaType     postgres.ColumnString
	Size          postgres.ColumnInteger
	Checksum      postgres.ColumnString
	Added         postgres.ColumnTimestamp
	Deleted       postgres.ColumnBool
	Exists        postgres.ColumnBool
	Created       postgres.ColumnTimestamp
	Modified      postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MediaTable struct {
	mediaTable

	EXCLUDED mediaTable
}

// AS creates new MediaTable with assigned alias
func (a MediaTable) AS(alias string) *MediaTable {
	return newMediaTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MediaTable with assigned schema name
func (a MediaTable) FromSchema(schemaName string) *MediaTable {
	return newMediaTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MediaTable with assigned table prefix
func (a MediaTable) WithPrefix(prefix string) *MediaTable {
	return newMediaTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MediaTable with assigned table suffix
func (a MediaTable) WithSuffix(suffix string) *MediaTable {
	return newMediaTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMediaTable(schemaName, tableName, alias string) *MediaTable {
	return &MediaTable{
		mediaTable: newMediaTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newMediaTableImpl("", "excluded", ""),
	}
}

func newMediaTableImpl(schemaName, tableName, alias string) mediaTable {
	var (
		IDColumn            = postgres.StringColumn("id")
		LibraryPathIDColumn = postgres.StringColumn("library_path_id")
		PathColumn          = postgres.StringColumn("path")
		TitleColumn         = postgres.StringColumn("title")
		MediaTypeColumn     = postgres.StringColumn("media_type")
		SizeColumn          = postgres.IntegerColumn("size")
		ChecksumColumn      = postgres.StringColumn("checksum")
		AddedColumn         = postgres.TimestampColumn("added")
		DeletedColumn       = postgres.BoolColumn("deleted")
		ExistsColumn        = postgres.BoolColumn("exists")
		CreatedColumn       = postgres.TimestampColumn("created")
		ModifiedColumn      = postgres.TimestampColumn("modified")
		allColumns          = postgres.ColumnList{IDColumn, LibraryPathIDColumn, PathColumn, TitleColumn, MediaTypeColumn, SizeColumn, ChecksumColumn, AddedColumn, DeletedColumn, ExistsColumn, CreatedColumn, ModifiedColumn}
		mutableColumns      = postgres.ColumnList{LibraryPathIDColumn, PathColumn, TitleColumn, MediaTypeColumn, SizeColumn, ChecksumColumn, AddedColumn, DeletedColumn, ExistsColumn, CreatedColumn, ModifiedColumn}
	)

	return mediaTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		LibraryPathID: LibraryPathIDColumn,
		Path:          PathColumn,
		Title:         TitleColumn,
		MediaType:     MediaTypeColumn,
		Size:          SizeColumn,
		Checksum:      ChecksumColumn,
		Added:         AddedColumn,
		Deleted:       DeletedColumn,
		Exists:        ExistsColumn,
		Created:       CreatedColumn,
		Modified:      ModifiedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
