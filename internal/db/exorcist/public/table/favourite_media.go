//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FavouriteMedia = newFavouriteMediaTable("public", "favourite_media", "")

type favouriteMediaTable struct {
	postgres.Table

	// Columns
	ID       postgres.ColumnString
	UserID   postgres.ColumnString
	MediaID  postgres.ColumnString
	Created  postgres.ColumnTimestamp
	Modified postgres.ColumnTimestamp
	GhostID  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FavouriteMediaTable struct {
	favouriteMediaTable

	EXCLUDED favouriteMediaTable
}

// AS creates new FavouriteMediaTable with assigned alias
func (a FavouriteMediaTable) AS(alias string) *FavouriteMediaTable {
	return newFavouriteMediaTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FavouriteMediaTable with assigned schema name
func (a FavouriteMediaTable) FromSchema(schemaName string) *FavouriteMediaTable {
	return newFavouriteMediaTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FavouriteMediaTable with assigned table prefix
func (a FavouriteMediaTable) WithPrefix(prefix string) *FavouriteMediaTable {
	return newFavouriteMediaTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FavouriteMediaTable with assigned table suffix
func (a FavouriteMediaTable) WithSuffix(suffix string) *FavouriteMediaTable {
	return newFavouriteMediaTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFavouriteMediaTable(schemaName, tableName, alias string) *FavouriteMediaTable {
	return &FavouriteMediaTable{
		favouriteMediaTable: newFavouriteMediaTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newFavouriteMediaTableImpl("", "excluded", ""),
	}
}

func newFavouriteMediaTableImpl(schemaName, tableName, alias string) favouriteMediaTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		UserIDColumn   = postgres.StringColumn("user_id")
		MediaIDColumn  = postgres.StringColumn("media_id")
		CreatedColumn  = postgres.TimestampColumn("created")
		ModifiedColumn = postgres.TimestampColumn("modified")
		GhostIDColumn  = postgres.IntegerColumn("ghost_id")
		allColumns     = postgres.ColumnList{IDColumn, UserIDColumn, MediaIDColumn, CreatedColumn, ModifiedColumn, GhostIDColumn}
		mutableColumns = postgres.ColumnList{UserIDColumn, MediaIDColumn, CreatedColumn, ModifiedColumn, GhostIDColumn}
	)

	return favouriteMediaTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		UserID:   UserIDColumn,
		MediaID:  MediaIDColumn,
		Created:  CreatedColumn,
		Modified: ModifiedColumn,
		GhostID:  GhostIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
