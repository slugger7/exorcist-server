//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Library = newLibraryTable("public", "library", "")

type libraryTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	Name        postgres.ColumnString
	LibraryType postgres.ColumnString
	Created     postgres.ColumnTimestamp
	Modified    postgres.ColumnTimestamp
	GhostID     postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LibraryTable struct {
	libraryTable

	EXCLUDED libraryTable
}

// AS creates new LibraryTable with assigned alias
func (a LibraryTable) AS(alias string) *LibraryTable {
	return newLibraryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LibraryTable with assigned schema name
func (a LibraryTable) FromSchema(schemaName string) *LibraryTable {
	return newLibraryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LibraryTable with assigned table prefix
func (a LibraryTable) WithPrefix(prefix string) *LibraryTable {
	return newLibraryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LibraryTable with assigned table suffix
func (a LibraryTable) WithSuffix(suffix string) *LibraryTable {
	return newLibraryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLibraryTable(schemaName, tableName, alias string) *LibraryTable {
	return &LibraryTable{
		libraryTable: newLibraryTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newLibraryTableImpl("", "excluded", ""),
	}
}

func newLibraryTableImpl(schemaName, tableName, alias string) libraryTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		NameColumn        = postgres.StringColumn("name")
		LibraryTypeColumn = postgres.StringColumn("library_type")
		CreatedColumn     = postgres.TimestampColumn("created")
		ModifiedColumn    = postgres.TimestampColumn("modified")
		GhostIDColumn     = postgres.IntegerColumn("ghost_id")
		allColumns        = postgres.ColumnList{IDColumn, NameColumn, LibraryTypeColumn, CreatedColumn, ModifiedColumn, GhostIDColumn}
		mutableColumns    = postgres.ColumnList{NameColumn, LibraryTypeColumn, CreatedColumn, ModifiedColumn, GhostIDColumn}
	)

	return libraryTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		LibraryType: LibraryTypeColumn,
		Created:     CreatedColumn,
		Modified:    ModifiedColumn,
		GhostID:     GhostIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
