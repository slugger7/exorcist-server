//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type JobStatus string

const (
	JobStatus_NotStarted JobStatus = "not_started"
	JobStatus_InProgress JobStatus = "in_progress"
	JobStatus_Failed     JobStatus = "failed"
	JobStatus_Completed  JobStatus = "completed"
	JobStatus_Cancelled  JobStatus = "cancelled"
)

var JobStatusAllValues = []JobStatus{
	JobStatus_NotStarted,
	JobStatus_InProgress,
	JobStatus_Failed,
	JobStatus_Completed,
	JobStatus_Cancelled,
}

func (e *JobStatus) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "not_started":
		*e = JobStatus_NotStarted
	case "in_progress":
		*e = JobStatus_InProgress
	case "failed":
		*e = JobStatus_Failed
	case "completed":
		*e = JobStatus_Completed
	case "cancelled":
		*e = JobStatus_Cancelled
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for JobStatus enum")
	}

	return nil
}

func (e JobStatus) String() string {
	return string(e)
}
