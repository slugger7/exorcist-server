//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type JobStatusEnum string

const (
	JobStatusEnum_NotStarted JobStatusEnum = "not_started"
	JobStatusEnum_InProgress JobStatusEnum = "in_progress"
	JobStatusEnum_Failed     JobStatusEnum = "failed"
	JobStatusEnum_Completed  JobStatusEnum = "completed"
	JobStatusEnum_Cancelled  JobStatusEnum = "cancelled"
)

var JobStatusEnumAllValues = []JobStatusEnum{
	JobStatusEnum_NotStarted,
	JobStatusEnum_InProgress,
	JobStatusEnum_Failed,
	JobStatusEnum_Completed,
	JobStatusEnum_Cancelled,
}

func (e *JobStatusEnum) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "not_started":
		*e = JobStatusEnum_NotStarted
	case "in_progress":
		*e = JobStatusEnum_InProgress
	case "failed":
		*e = JobStatusEnum_Failed
	case "completed":
		*e = JobStatusEnum_Completed
	case "cancelled":
		*e = JobStatusEnum_Cancelled
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for JobStatusEnum enum")
	}

	return nil
}

func (e JobStatusEnum) String() string {
	return string(e)
}
