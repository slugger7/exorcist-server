//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type JobTypeEnum string

const (
	JobTypeEnum_UpdateExistingVideos JobTypeEnum = "update_existing_videos"
	JobTypeEnum_ScanPath             JobTypeEnum = "scan_path"
	JobTypeEnum_GenerateChecksum     JobTypeEnum = "generate_checksum"
	JobTypeEnum_GenerateThumbnail    JobTypeEnum = "generate_thumbnail"
)

var JobTypeEnumAllValues = []JobTypeEnum{
	JobTypeEnum_UpdateExistingVideos,
	JobTypeEnum_ScanPath,
	JobTypeEnum_GenerateChecksum,
	JobTypeEnum_GenerateThumbnail,
}

func (e *JobTypeEnum) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "update_existing_videos":
		*e = JobTypeEnum_UpdateExistingVideos
	case "scan_path":
		*e = JobTypeEnum_ScanPath
	case "generate_checksum":
		*e = JobTypeEnum_GenerateChecksum
	case "generate_thumbnail":
		*e = JobTypeEnum_GenerateThumbnail
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for JobTypeEnum enum")
	}

	return nil
}

func (e JobTypeEnum) String() string {
	return string(e)
}
