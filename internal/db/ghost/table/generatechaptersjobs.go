//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var GenerateChaptersJobs = newGenerateChaptersJobsTable("", "GenerateChaptersJobs", "")

type generateChaptersJobsTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnInteger
	Overwrite sqlite.ColumnInteger
	LibraryId sqlite.ColumnInteger
	JobId     sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type GenerateChaptersJobsTable struct {
	generateChaptersJobsTable

	EXCLUDED generateChaptersJobsTable
}

// AS creates new GenerateChaptersJobsTable with assigned alias
func (a GenerateChaptersJobsTable) AS(alias string) *GenerateChaptersJobsTable {
	return newGenerateChaptersJobsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GenerateChaptersJobsTable with assigned schema name
func (a GenerateChaptersJobsTable) FromSchema(schemaName string) *GenerateChaptersJobsTable {
	return newGenerateChaptersJobsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GenerateChaptersJobsTable with assigned table prefix
func (a GenerateChaptersJobsTable) WithPrefix(prefix string) *GenerateChaptersJobsTable {
	return newGenerateChaptersJobsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GenerateChaptersJobsTable with assigned table suffix
func (a GenerateChaptersJobsTable) WithSuffix(suffix string) *GenerateChaptersJobsTable {
	return newGenerateChaptersJobsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGenerateChaptersJobsTable(schemaName, tableName, alias string) *GenerateChaptersJobsTable {
	return &GenerateChaptersJobsTable{
		generateChaptersJobsTable: newGenerateChaptersJobsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                  newGenerateChaptersJobsTableImpl("", "excluded", ""),
	}
}

func newGenerateChaptersJobsTableImpl(schemaName, tableName, alias string) generateChaptersJobsTable {
	var (
		IDColumn        = sqlite.IntegerColumn("Id")
		OverwriteColumn = sqlite.IntegerColumn("Overwrite")
		LibraryIdColumn = sqlite.IntegerColumn("LibraryId")
		JobIdColumn     = sqlite.IntegerColumn("JobId")
		allColumns      = sqlite.ColumnList{IDColumn, OverwriteColumn, LibraryIdColumn, JobIdColumn}
		mutableColumns  = sqlite.ColumnList{OverwriteColumn, LibraryIdColumn, JobIdColumn}
	)

	return generateChaptersJobsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Overwrite: OverwriteColumn,
		LibraryId: LibraryIdColumn,
		JobId:     JobIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
