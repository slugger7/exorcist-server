//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Efmigrationshistory = newEfmigrationshistoryTable("", "__EFMigrationsHistory", "")

type efmigrationshistoryTable struct {
	sqlite.Table

	// Columns
	MigrationId    sqlite.ColumnString
	ProductVersion sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type EfmigrationshistoryTable struct {
	efmigrationshistoryTable

	EXCLUDED efmigrationshistoryTable
}

// AS creates new EfmigrationshistoryTable with assigned alias
func (a EfmigrationshistoryTable) AS(alias string) *EfmigrationshistoryTable {
	return newEfmigrationshistoryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EfmigrationshistoryTable with assigned schema name
func (a EfmigrationshistoryTable) FromSchema(schemaName string) *EfmigrationshistoryTable {
	return newEfmigrationshistoryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EfmigrationshistoryTable with assigned table prefix
func (a EfmigrationshistoryTable) WithPrefix(prefix string) *EfmigrationshistoryTable {
	return newEfmigrationshistoryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EfmigrationshistoryTable with assigned table suffix
func (a EfmigrationshistoryTable) WithSuffix(suffix string) *EfmigrationshistoryTable {
	return newEfmigrationshistoryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEfmigrationshistoryTable(schemaName, tableName, alias string) *EfmigrationshistoryTable {
	return &EfmigrationshistoryTable{
		efmigrationshistoryTable: newEfmigrationshistoryTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newEfmigrationshistoryTableImpl("", "excluded", ""),
	}
}

func newEfmigrationshistoryTableImpl(schemaName, tableName, alias string) efmigrationshistoryTable {
	var (
		MigrationIdColumn    = sqlite.StringColumn("MigrationId")
		ProductVersionColumn = sqlite.StringColumn("ProductVersion")
		allColumns           = sqlite.ColumnList{MigrationIdColumn, ProductVersionColumn}
		mutableColumns       = sqlite.ColumnList{ProductVersionColumn}
	)

	return efmigrationshistoryTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		MigrationId:    MigrationIdColumn,
		ProductVersion: ProductVersionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
