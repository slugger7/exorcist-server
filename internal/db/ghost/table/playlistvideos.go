//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var PlaylistVideos = newPlaylistVideosTable("", "PlaylistVideos", "")

type playlistVideosTable struct {
	sqlite.Table

	// Columns
	ID         sqlite.ColumnInteger
	CreatedAt  sqlite.ColumnString
	VideoId    sqlite.ColumnInteger
	PlaylistId sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type PlaylistVideosTable struct {
	playlistVideosTable

	EXCLUDED playlistVideosTable
}

// AS creates new PlaylistVideosTable with assigned alias
func (a PlaylistVideosTable) AS(alias string) *PlaylistVideosTable {
	return newPlaylistVideosTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PlaylistVideosTable with assigned schema name
func (a PlaylistVideosTable) FromSchema(schemaName string) *PlaylistVideosTable {
	return newPlaylistVideosTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PlaylistVideosTable with assigned table prefix
func (a PlaylistVideosTable) WithPrefix(prefix string) *PlaylistVideosTable {
	return newPlaylistVideosTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PlaylistVideosTable with assigned table suffix
func (a PlaylistVideosTable) WithSuffix(suffix string) *PlaylistVideosTable {
	return newPlaylistVideosTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPlaylistVideosTable(schemaName, tableName, alias string) *PlaylistVideosTable {
	return &PlaylistVideosTable{
		playlistVideosTable: newPlaylistVideosTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newPlaylistVideosTableImpl("", "excluded", ""),
	}
}

func newPlaylistVideosTableImpl(schemaName, tableName, alias string) playlistVideosTable {
	var (
		IDColumn         = sqlite.IntegerColumn("Id")
		CreatedAtColumn  = sqlite.StringColumn("CreatedAt")
		VideoIdColumn    = sqlite.IntegerColumn("VideoId")
		PlaylistIdColumn = sqlite.IntegerColumn("PlaylistId")
		allColumns       = sqlite.ColumnList{IDColumn, CreatedAtColumn, VideoIdColumn, PlaylistIdColumn}
		mutableColumns   = sqlite.ColumnList{CreatedAtColumn, VideoIdColumn, PlaylistIdColumn}
	)

	return playlistVideosTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		VideoId:    VideoIdColumn,
		PlaylistId: PlaylistIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
