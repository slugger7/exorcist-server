//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var VideoActors = newVideoActorsTable("", "VideoActors", "")

type videoActorsTable struct {
	sqlite.Table

	// Columns
	ID      sqlite.ColumnInteger
	VideoId sqlite.ColumnInteger
	ActorId sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type VideoActorsTable struct {
	videoActorsTable

	EXCLUDED videoActorsTable
}

// AS creates new VideoActorsTable with assigned alias
func (a VideoActorsTable) AS(alias string) *VideoActorsTable {
	return newVideoActorsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VideoActorsTable with assigned schema name
func (a VideoActorsTable) FromSchema(schemaName string) *VideoActorsTable {
	return newVideoActorsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VideoActorsTable with assigned table prefix
func (a VideoActorsTable) WithPrefix(prefix string) *VideoActorsTable {
	return newVideoActorsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VideoActorsTable with assigned table suffix
func (a VideoActorsTable) WithSuffix(suffix string) *VideoActorsTable {
	return newVideoActorsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVideoActorsTable(schemaName, tableName, alias string) *VideoActorsTable {
	return &VideoActorsTable{
		videoActorsTable: newVideoActorsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newVideoActorsTableImpl("", "excluded", ""),
	}
}

func newVideoActorsTableImpl(schemaName, tableName, alias string) videoActorsTable {
	var (
		IDColumn       = sqlite.IntegerColumn("Id")
		VideoIdColumn  = sqlite.IntegerColumn("VideoId")
		ActorIdColumn  = sqlite.IntegerColumn("ActorId")
		allColumns     = sqlite.ColumnList{IDColumn, VideoIdColumn, ActorIdColumn}
		mutableColumns = sqlite.ColumnList{VideoIdColumn, ActorIdColumn}
	)

	return videoActorsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		VideoId: VideoIdColumn,
		ActorId: ActorIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
