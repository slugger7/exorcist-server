//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Chapters = newChaptersTable("", "Chapters", "")

type chaptersTable struct {
	sqlite.Table

	// Columns
	ID          sqlite.ColumnInteger
	Description sqlite.ColumnString
	ImageId     sqlite.ColumnInteger
	VideoId     sqlite.ColumnInteger
	Timestamp   sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ChaptersTable struct {
	chaptersTable

	EXCLUDED chaptersTable
}

// AS creates new ChaptersTable with assigned alias
func (a ChaptersTable) AS(alias string) *ChaptersTable {
	return newChaptersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ChaptersTable with assigned schema name
func (a ChaptersTable) FromSchema(schemaName string) *ChaptersTable {
	return newChaptersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ChaptersTable with assigned table prefix
func (a ChaptersTable) WithPrefix(prefix string) *ChaptersTable {
	return newChaptersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ChaptersTable with assigned table suffix
func (a ChaptersTable) WithSuffix(suffix string) *ChaptersTable {
	return newChaptersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newChaptersTable(schemaName, tableName, alias string) *ChaptersTable {
	return &ChaptersTable{
		chaptersTable: newChaptersTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newChaptersTableImpl("", "excluded", ""),
	}
}

func newChaptersTableImpl(schemaName, tableName, alias string) chaptersTable {
	var (
		IDColumn          = sqlite.IntegerColumn("Id")
		DescriptionColumn = sqlite.StringColumn("Description")
		ImageIdColumn     = sqlite.IntegerColumn("ImageId")
		VideoIdColumn     = sqlite.IntegerColumn("VideoId")
		TimestampColumn   = sqlite.IntegerColumn("Timestamp")
		allColumns        = sqlite.ColumnList{IDColumn, DescriptionColumn, ImageIdColumn, VideoIdColumn, TimestampColumn}
		mutableColumns    = sqlite.ColumnList{DescriptionColumn, ImageIdColumn, VideoIdColumn, TimestampColumn}
	)

	return chaptersTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Description: DescriptionColumn,
		ImageId:     ImageIdColumn,
		VideoId:     VideoIdColumn,
		Timestamp:   TimestampColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
