//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Actors = newActorsTable("", "Actors", "")

type actorsTable struct {
	sqlite.Table

	// Columns
	ID   sqlite.ColumnInteger
	Name sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ActorsTable struct {
	actorsTable

	EXCLUDED actorsTable
}

// AS creates new ActorsTable with assigned alias
func (a ActorsTable) AS(alias string) *ActorsTable {
	return newActorsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ActorsTable with assigned schema name
func (a ActorsTable) FromSchema(schemaName string) *ActorsTable {
	return newActorsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ActorsTable with assigned table prefix
func (a ActorsTable) WithPrefix(prefix string) *ActorsTable {
	return newActorsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ActorsTable with assigned table suffix
func (a ActorsTable) WithSuffix(suffix string) *ActorsTable {
	return newActorsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newActorsTable(schemaName, tableName, alias string) *ActorsTable {
	return &ActorsTable{
		actorsTable: newActorsTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newActorsTableImpl("", "excluded", ""),
	}
}

func newActorsTableImpl(schemaName, tableName, alias string) actorsTable {
	var (
		IDColumn       = sqlite.IntegerColumn("Id")
		NameColumn     = sqlite.StringColumn("Name")
		allColumns     = sqlite.ColumnList{IDColumn, NameColumn}
		mutableColumns = sqlite.ColumnList{NameColumn}
	)

	return actorsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:   IDColumn,
		Name: NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
