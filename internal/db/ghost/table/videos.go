//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Videos = newVideosTable("", "Videos", "")

type videosTable struct {
	sqlite.Table

	// Columns
	ID                 sqlite.ColumnInteger
	FileName           sqlite.ColumnString
	Title              sqlite.ColumnString
	Path               sqlite.ColumnString
	LibraryPathId      sqlite.ColumnInteger
	DateAdded          sqlite.ColumnString
	Created            sqlite.ColumnString
	Height             sqlite.ColumnInteger
	LastMetadataUpdate sqlite.ColumnString
	LastNfoScan        sqlite.ColumnString
	Runtime            sqlite.ColumnFloat
	Size               sqlite.ColumnInteger
	Width              sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type VideosTable struct {
	videosTable

	EXCLUDED videosTable
}

// AS creates new VideosTable with assigned alias
func (a VideosTable) AS(alias string) *VideosTable {
	return newVideosTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VideosTable with assigned schema name
func (a VideosTable) FromSchema(schemaName string) *VideosTable {
	return newVideosTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VideosTable with assigned table prefix
func (a VideosTable) WithPrefix(prefix string) *VideosTable {
	return newVideosTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VideosTable with assigned table suffix
func (a VideosTable) WithSuffix(suffix string) *VideosTable {
	return newVideosTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVideosTable(schemaName, tableName, alias string) *VideosTable {
	return &VideosTable{
		videosTable: newVideosTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newVideosTableImpl("", "excluded", ""),
	}
}

func newVideosTableImpl(schemaName, tableName, alias string) videosTable {
	var (
		IDColumn                 = sqlite.IntegerColumn("Id")
		FileNameColumn           = sqlite.StringColumn("FileName")
		TitleColumn              = sqlite.StringColumn("Title")
		PathColumn               = sqlite.StringColumn("Path")
		LibraryPathIdColumn      = sqlite.IntegerColumn("LibraryPathId")
		DateAddedColumn          = sqlite.StringColumn("DateAdded")
		CreatedColumn            = sqlite.StringColumn("Created")
		HeightColumn             = sqlite.IntegerColumn("Height")
		LastMetadataUpdateColumn = sqlite.StringColumn("LastMetadataUpdate")
		LastNfoScanColumn        = sqlite.StringColumn("LastNfoScan")
		RuntimeColumn            = sqlite.FloatColumn("Runtime")
		SizeColumn               = sqlite.IntegerColumn("Size")
		WidthColumn              = sqlite.IntegerColumn("Width")
		allColumns               = sqlite.ColumnList{IDColumn, FileNameColumn, TitleColumn, PathColumn, LibraryPathIdColumn, DateAddedColumn, CreatedColumn, HeightColumn, LastMetadataUpdateColumn, LastNfoScanColumn, RuntimeColumn, SizeColumn, WidthColumn}
		mutableColumns           = sqlite.ColumnList{FileNameColumn, TitleColumn, PathColumn, LibraryPathIdColumn, DateAddedColumn, CreatedColumn, HeightColumn, LastMetadataUpdateColumn, LastNfoScanColumn, RuntimeColumn, SizeColumn, WidthColumn}
	)

	return videosTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		FileName:           FileNameColumn,
		Title:              TitleColumn,
		Path:               PathColumn,
		LibraryPathId:      LibraryPathIdColumn,
		DateAdded:          DateAddedColumn,
		Created:            CreatedColumn,
		Height:             HeightColumn,
		LastMetadataUpdate: LastMetadataUpdateColumn,
		LastNfoScan:        LastNfoScanColumn,
		Runtime:            RuntimeColumn,
		Size:               SizeColumn,
		Width:              WidthColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
