//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var RelatedVideos = newRelatedVideosTable("", "RelatedVideos", "")

type relatedVideosTable struct {
	sqlite.Table

	// Columns
	ID          sqlite.ColumnInteger
	VideoId     sqlite.ColumnInteger
	RelatedToId sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type RelatedVideosTable struct {
	relatedVideosTable

	EXCLUDED relatedVideosTable
}

// AS creates new RelatedVideosTable with assigned alias
func (a RelatedVideosTable) AS(alias string) *RelatedVideosTable {
	return newRelatedVideosTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RelatedVideosTable with assigned schema name
func (a RelatedVideosTable) FromSchema(schemaName string) *RelatedVideosTable {
	return newRelatedVideosTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RelatedVideosTable with assigned table prefix
func (a RelatedVideosTable) WithPrefix(prefix string) *RelatedVideosTable {
	return newRelatedVideosTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RelatedVideosTable with assigned table suffix
func (a RelatedVideosTable) WithSuffix(suffix string) *RelatedVideosTable {
	return newRelatedVideosTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRelatedVideosTable(schemaName, tableName, alias string) *RelatedVideosTable {
	return &RelatedVideosTable{
		relatedVideosTable: newRelatedVideosTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newRelatedVideosTableImpl("", "excluded", ""),
	}
}

func newRelatedVideosTableImpl(schemaName, tableName, alias string) relatedVideosTable {
	var (
		IDColumn          = sqlite.IntegerColumn("Id")
		VideoIdColumn     = sqlite.IntegerColumn("VideoId")
		RelatedToIdColumn = sqlite.IntegerColumn("RelatedToId")
		allColumns        = sqlite.ColumnList{IDColumn, VideoIdColumn, RelatedToIdColumn}
		mutableColumns    = sqlite.ColumnList{VideoIdColumn, RelatedToIdColumn}
	)

	return relatedVideosTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		VideoId:     VideoIdColumn,
		RelatedToId: RelatedToIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
