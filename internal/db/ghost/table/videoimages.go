//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var VideoImages = newVideoImagesTable("", "VideoImages", "")

type videoImagesTable struct {
	sqlite.Table

	// Columns
	ID      sqlite.ColumnInteger
	Type    sqlite.ColumnString
	VideoId sqlite.ColumnInteger
	ImageId sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type VideoImagesTable struct {
	videoImagesTable

	EXCLUDED videoImagesTable
}

// AS creates new VideoImagesTable with assigned alias
func (a VideoImagesTable) AS(alias string) *VideoImagesTable {
	return newVideoImagesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VideoImagesTable with assigned schema name
func (a VideoImagesTable) FromSchema(schemaName string) *VideoImagesTable {
	return newVideoImagesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VideoImagesTable with assigned table prefix
func (a VideoImagesTable) WithPrefix(prefix string) *VideoImagesTable {
	return newVideoImagesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VideoImagesTable with assigned table suffix
func (a VideoImagesTable) WithSuffix(suffix string) *VideoImagesTable {
	return newVideoImagesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVideoImagesTable(schemaName, tableName, alias string) *VideoImagesTable {
	return &VideoImagesTable{
		videoImagesTable: newVideoImagesTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newVideoImagesTableImpl("", "excluded", ""),
	}
}

func newVideoImagesTableImpl(schemaName, tableName, alias string) videoImagesTable {
	var (
		IDColumn       = sqlite.IntegerColumn("Id")
		TypeColumn     = sqlite.StringColumn("Type")
		VideoIdColumn  = sqlite.IntegerColumn("VideoId")
		ImageIdColumn  = sqlite.IntegerColumn("ImageId")
		allColumns     = sqlite.ColumnList{IDColumn, TypeColumn, VideoIdColumn, ImageIdColumn}
		mutableColumns = sqlite.ColumnList{TypeColumn, VideoIdColumn, ImageIdColumn}
	)

	return videoImagesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		Type:    TypeColumn,
		VideoId: VideoIdColumn,
		ImageId: ImageIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
