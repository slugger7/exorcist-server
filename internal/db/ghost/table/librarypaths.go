//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var LibraryPaths = newLibraryPathsTable("", "LibraryPaths", "")

type libraryPathsTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnInteger
	Path      sqlite.ColumnString
	LibraryId sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type LibraryPathsTable struct {
	libraryPathsTable

	EXCLUDED libraryPathsTable
}

// AS creates new LibraryPathsTable with assigned alias
func (a LibraryPathsTable) AS(alias string) *LibraryPathsTable {
	return newLibraryPathsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LibraryPathsTable with assigned schema name
func (a LibraryPathsTable) FromSchema(schemaName string) *LibraryPathsTable {
	return newLibraryPathsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LibraryPathsTable with assigned table prefix
func (a LibraryPathsTable) WithPrefix(prefix string) *LibraryPathsTable {
	return newLibraryPathsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LibraryPathsTable with assigned table suffix
func (a LibraryPathsTable) WithSuffix(suffix string) *LibraryPathsTable {
	return newLibraryPathsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLibraryPathsTable(schemaName, tableName, alias string) *LibraryPathsTable {
	return &LibraryPathsTable{
		libraryPathsTable: newLibraryPathsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newLibraryPathsTableImpl("", "excluded", ""),
	}
}

func newLibraryPathsTableImpl(schemaName, tableName, alias string) libraryPathsTable {
	var (
		IDColumn        = sqlite.IntegerColumn("Id")
		PathColumn      = sqlite.StringColumn("Path")
		LibraryIdColumn = sqlite.IntegerColumn("LibraryId")
		allColumns      = sqlite.ColumnList{IDColumn, PathColumn, LibraryIdColumn}
		mutableColumns  = sqlite.ColumnList{PathColumn, LibraryIdColumn}
	)

	return libraryPathsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Path:      PathColumn,
		LibraryId: LibraryIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
