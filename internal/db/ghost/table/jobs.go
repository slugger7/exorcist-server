//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Jobs = newJobsTable("", "Jobs", "")

type jobsTable struct {
	sqlite.Table

	// Columns
	ID         sqlite.ColumnInteger
	Status     sqlite.ColumnString
	Created    sqlite.ColumnString
	Modified   sqlite.ColumnString
	ThreadName sqlite.ColumnString
	Type       sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type JobsTable struct {
	jobsTable

	EXCLUDED jobsTable
}

// AS creates new JobsTable with assigned alias
func (a JobsTable) AS(alias string) *JobsTable {
	return newJobsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new JobsTable with assigned schema name
func (a JobsTable) FromSchema(schemaName string) *JobsTable {
	return newJobsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new JobsTable with assigned table prefix
func (a JobsTable) WithPrefix(prefix string) *JobsTable {
	return newJobsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new JobsTable with assigned table suffix
func (a JobsTable) WithSuffix(suffix string) *JobsTable {
	return newJobsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newJobsTable(schemaName, tableName, alias string) *JobsTable {
	return &JobsTable{
		jobsTable: newJobsTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newJobsTableImpl("", "excluded", ""),
	}
}

func newJobsTableImpl(schemaName, tableName, alias string) jobsTable {
	var (
		IDColumn         = sqlite.IntegerColumn("Id")
		StatusColumn     = sqlite.StringColumn("Status")
		CreatedColumn    = sqlite.StringColumn("Created")
		ModifiedColumn   = sqlite.StringColumn("Modified")
		ThreadNameColumn = sqlite.StringColumn("ThreadName")
		TypeColumn       = sqlite.StringColumn("Type")
		allColumns       = sqlite.ColumnList{IDColumn, StatusColumn, CreatedColumn, ModifiedColumn, ThreadNameColumn, TypeColumn}
		mutableColumns   = sqlite.ColumnList{StatusColumn, CreatedColumn, ModifiedColumn, ThreadNameColumn, TypeColumn}
	)

	return jobsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Status:     StatusColumn,
		Created:    CreatedColumn,
		Modified:   ModifiedColumn,
		ThreadName: ThreadNameColumn,
		Type:       TypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
