//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var ConvertJobs = newConvertJobsTable("", "ConvertJobs", "")

type convertJobsTable struct {
	sqlite.Table

	// Columns
	ID                 sqlite.ColumnInteger
	Title              sqlite.ColumnString
	Path               sqlite.ColumnString
	VideoId            sqlite.ColumnInteger
	JobId              sqlite.ColumnInteger
	ConstantRateFactor sqlite.ColumnInteger
	VariableBitrate    sqlite.ColumnInteger
	ForcePixelFormat   sqlite.ColumnString
	Height             sqlite.ColumnInteger
	Width              sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ConvertJobsTable struct {
	convertJobsTable

	EXCLUDED convertJobsTable
}

// AS creates new ConvertJobsTable with assigned alias
func (a ConvertJobsTable) AS(alias string) *ConvertJobsTable {
	return newConvertJobsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ConvertJobsTable with assigned schema name
func (a ConvertJobsTable) FromSchema(schemaName string) *ConvertJobsTable {
	return newConvertJobsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ConvertJobsTable with assigned table prefix
func (a ConvertJobsTable) WithPrefix(prefix string) *ConvertJobsTable {
	return newConvertJobsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ConvertJobsTable with assigned table suffix
func (a ConvertJobsTable) WithSuffix(suffix string) *ConvertJobsTable {
	return newConvertJobsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newConvertJobsTable(schemaName, tableName, alias string) *ConvertJobsTable {
	return &ConvertJobsTable{
		convertJobsTable: newConvertJobsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newConvertJobsTableImpl("", "excluded", ""),
	}
}

func newConvertJobsTableImpl(schemaName, tableName, alias string) convertJobsTable {
	var (
		IDColumn                 = sqlite.IntegerColumn("Id")
		TitleColumn              = sqlite.StringColumn("Title")
		PathColumn               = sqlite.StringColumn("Path")
		VideoIdColumn            = sqlite.IntegerColumn("VideoId")
		JobIdColumn              = sqlite.IntegerColumn("JobId")
		ConstantRateFactorColumn = sqlite.IntegerColumn("ConstantRateFactor")
		VariableBitrateColumn    = sqlite.IntegerColumn("VariableBitrate")
		ForcePixelFormatColumn   = sqlite.StringColumn("ForcePixelFormat")
		HeightColumn             = sqlite.IntegerColumn("Height")
		WidthColumn              = sqlite.IntegerColumn("Width")
		allColumns               = sqlite.ColumnList{IDColumn, TitleColumn, PathColumn, VideoIdColumn, JobIdColumn, ConstantRateFactorColumn, VariableBitrateColumn, ForcePixelFormatColumn, HeightColumn, WidthColumn}
		mutableColumns           = sqlite.ColumnList{TitleColumn, PathColumn, VideoIdColumn, JobIdColumn, ConstantRateFactorColumn, VariableBitrateColumn, ForcePixelFormatColumn, HeightColumn, WidthColumn}
	)

	return convertJobsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		Title:              TitleColumn,
		Path:               PathColumn,
		VideoId:            VideoIdColumn,
		JobId:              JobIdColumn,
		ConstantRateFactor: ConstantRateFactorColumn,
		VariableBitrate:    VariableBitrateColumn,
		ForcePixelFormat:   ForcePixelFormatColumn,
		Height:             HeightColumn,
		Width:              WidthColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
