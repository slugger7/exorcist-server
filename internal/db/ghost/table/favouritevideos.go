//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var FavouriteVideos = newFavouriteVideosTable("", "FavouriteVideos", "")

type favouriteVideosTable struct {
	sqlite.Table

	// Columns
	ID      sqlite.ColumnInteger
	VideoId sqlite.ColumnInteger
	UserId  sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type FavouriteVideosTable struct {
	favouriteVideosTable

	EXCLUDED favouriteVideosTable
}

// AS creates new FavouriteVideosTable with assigned alias
func (a FavouriteVideosTable) AS(alias string) *FavouriteVideosTable {
	return newFavouriteVideosTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FavouriteVideosTable with assigned schema name
func (a FavouriteVideosTable) FromSchema(schemaName string) *FavouriteVideosTable {
	return newFavouriteVideosTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FavouriteVideosTable with assigned table prefix
func (a FavouriteVideosTable) WithPrefix(prefix string) *FavouriteVideosTable {
	return newFavouriteVideosTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FavouriteVideosTable with assigned table suffix
func (a FavouriteVideosTable) WithSuffix(suffix string) *FavouriteVideosTable {
	return newFavouriteVideosTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFavouriteVideosTable(schemaName, tableName, alias string) *FavouriteVideosTable {
	return &FavouriteVideosTable{
		favouriteVideosTable: newFavouriteVideosTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newFavouriteVideosTableImpl("", "excluded", ""),
	}
}

func newFavouriteVideosTableImpl(schemaName, tableName, alias string) favouriteVideosTable {
	var (
		IDColumn       = sqlite.IntegerColumn("Id")
		VideoIdColumn  = sqlite.IntegerColumn("VideoId")
		UserIdColumn   = sqlite.IntegerColumn("UserId")
		allColumns     = sqlite.ColumnList{IDColumn, VideoIdColumn, UserIdColumn}
		mutableColumns = sqlite.ColumnList{VideoIdColumn, UserIdColumn}
	)

	return favouriteVideosTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		VideoId: VideoIdColumn,
		UserId:  UserIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
